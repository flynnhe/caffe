#include <math_functions.h>  // CUDA's, not caffe's, for fabs, signbit
#include <thrust/device_vector.h>
#include <thrust/functional.h>  // thrust::plus
#include <thrust/reduce.h>

#include <cmath>
#include <cstdlib>
#include <cstring>

#include "caffe/common.hpp"
#include "caffe/util/math_functions.hpp"

__constant__ double stddev[320] = {
  444.772614, 80.927393, 46.437919, 32.579918, 24.590346, 18.989920, 14.375388, 10.834371, 81.646489, 44.831822, 32.587615, 24.861701, 19.878237, 15.775380, 12.279329, 9.492548, 47.368259, 32.508013, 26.070991, 21.209060, 17.220248, 14.056213, 10.928734, 8.759741, 32.561724, 24.755374, 21.029075, 17.912515, 14.949381, 12.446078, 9.484561, 7.752638, 24.591685, 19.944462, 17.257526, 14.982182, 12.662132, 10.576420, 8.325332, 6.411453, 19.096002, 15.653796, 14.045970, 12.315150, 10.336071, 8.668511, 6.687502, 5.236372, 14.556236, 12.179023, 11.300305, 10.093677, 8.311213, 7.300486, 5.564066, 4.460040, 11.212345, 9.644406, 8.993476, 8.063641, 6.813818, 5.793254, 4.431826, 3.563365, 444.768003, 81.636537, 47.365073, 32.559446, 24.587363, 19.105888, 14.557163, 10.933486, 80.931012, 44.829926, 32.507780, 24.756285, 19.949114, 15.691742, 12.175214, 9.510105, 46.441310, 32.586365, 26.068887, 21.030211, 17.257660, 14.049123, 10.859510, 8.796277, 32.575844, 24.859412, 21.209177, 17.911024, 14.854055, 12.437385, 9.510728, 7.842899, 24.594636, 19.873404, 17.220628, 15.080094, 12.663666, 10.628050, 8.308792, 6.328659, 18.976143, 15.738960, 14.056996, 12.334114, 10.272969, 8.666790, 6.731022, 5.288101, 14.373069, 12.279745, 11.366067, 10.077119, 8.325657, 7.254071, 5.563117, 4.430859, 11.116418, 9.636042, 8.955153, 7.950117, 6.896846, 5.749203, 4.460699, 3.563411, 443.358051, 80.983667, 46.375614, 32.311731, 24.530284, 18.750011, 14.372248, 10.764484, 80.988413, 44.725489, 32.616646, 24.800616, 19.660621, 15.713181, 12.152112, 9.428055, 46.378000, 32.618767, 26.238835, 21.162434, 17.333308, 14.065593, 10.831169, 8.803107, 32.311862, 24.798969, 21.160202, 17.878425, 14.900927, 12.536351, 9.484261, 7.820672, 24.533267, 19.651052, 17.335798, 15.031572, 12.711977, 10.541232, 8.441078, 6.390454, 18.741081, 15.674537, 14.064683, 12.409650, 10.228871, 8.657463, 6.641246, 5.257478, 14.368492, 12.157966, 11.278669, 10.072791, 8.441284, 7.209904, 5.559655, 4.408565, 11.054968, 9.573201, 8.993442, 8.029360, 6.867110, 5.766780, 4.410164, 3.592949, 442.317230, 81.302239, 47.172646, 32.425618, 24.560898, 19.103219, 14.586486, 10.965834, 80.968375, 44.878430, 32.643109, 24.883163, 20.112211, 15.808970, 12.253189, 9.591128, 46.476166, 32.674097, 26.138579, 21.159951, 17.385465, 14.133633, 10.932992, 8.884573, 32.603381, 24.894831, 21.296960, 17.980855, 14.929025, 12.530879, 9.561935, 7.913102, 24.576289, 19.907873, 17.288333, 15.155760, 12.721477, 10.702977, 8.387807, 6.374109, 19.028972, 15.759456, 14.084352, 12.407104, 10.334869, 8.727980, 6.784095, 5.329144, 14.364708, 12.323589, 11.416557, 10.131549, 8.390165, 7.305447, 5.590976, 4.455594, 11.135640, 9.683488, 9.002763, 7.995384, 6.940450, 5.801899, 4.494637, 3.598407, 442.321580, 80.964208, 46.472520, 32.607291, 24.572235, 19.042611, 14.366541, 10.848873, 81.312211, 44.879572, 32.675527, 24.897688, 19.911621, 15.793952, 12.323380, 9.539921, 47.173834, 32.642692, 26.140993, 21.295983, 17.288061, 14.083607, 10.972248, 8.798642, 32.429887, 24.882081, 21.158716, 17.982472, 15.022785, 12.518370, 9.531115, 7.790005, 24.566068, 20.108510, 17.384305, 15.058670, 12.720200, 10.641316, 8.389771, 6.451387, 19.092867, 15.771378, 14.130666, 12.401243, 10.409839, 8.729785, 6.736133, 5.283360, 14.586418, 12.256856, 11.377790, 10.152820, 8.389443, 7.358811, 5.592230, 4.493974, 11.247626, 9.721793, 9.075984, 8.123523, 6.864215, 5.840052, 4.456989, 3.599178, 
};

__constant__ double mean[320] = {
  -151.775581, 0.049537, 0.204583, 0.043784, -0.131116, 0.061597, -0.027033, 0.024837, -0.310290, -0.154791, 0.008603, 0.117759, -0.027768, 0.073303, 0.061298, 0.059546, -0.156261, -0.086234, 0.025354, 0.003158, 0.097586, -0.006525, 0.013185, -0.007214, -0.048848, 0.075336, -0.057160, -0.064401, 0.047604, -0.005644, 0.031225, 0.017087, -0.243820, -0.019437, 0.090998, -0.031652, -0.012142, -0.006252, 0.021579, -0.004964, -0.051025, 0.070563, 0.020436, -0.030426, 0.031198, -0.031216, -0.020935, -0.011152, -0.025009, 0.009083, -0.047568, 0.006733, -0.007387, 0.010563, -0.019909, 0.023993, 0.010998, 0.026397, -0.013693, 0.011978, 0.017668, -0.001515, 0.002132, -0.013684, -151.779946, -0.299029, -0.144592, -0.037949, -0.242976, -0.039918, -0.011162, 0.024174, 0.036506, -0.153757, -0.084029, 0.073430, -0.032477, 0.071180, 0.010118, 0.026860, 0.193566, 0.008802, 0.023838, -0.058185, 0.075236, 0.017550, -0.054446, -0.010681, 0.035535, 0.117414, 0.003711, -0.065735, -0.048530, -0.025136, 0.005808, 0.009800, -0.131171, -0.017278, 0.110898, 0.061996, -0.011107, 0.052840, 0.005109, 0.033721, 0.047840, 0.079819, -0.007042, -0.014619, -0.018748, -0.033367, 0.012296, -0.002187, -0.041706, 0.061062, 0.016007, 0.037668, 0.007568, -0.023848, -0.018457, -0.001525, 0.011534, 0.052623, -0.012768, 0.010998, -0.017604, -0.011715, 0.026479, -0.013666, -152.512341, 0.044138, 0.154383, 0.038103, 0.082405, -0.010200, 0.001334, 0.028539, 0.031815, -0.138031, -0.136098, -0.037523, -0.002123, 0.039338, 0.062868, -0.050599, 0.144065, -0.135417, 0.044755, 0.051071, -0.052623, 0.039474, -0.011270, -0.005000, 0.023857, -0.036216, 0.052432, 0.008630, -0.037123, -0.014909, -0.009764, -0.025236, 0.080000, 0.008575, -0.043358, -0.023621, -0.076343, -0.020408, 0.022169, 0.028584, -0.024882, 0.040009, 0.039574, -0.010989, -0.027523, -0.031334, -0.016080, -0.000372, -0.011425, 0.061180, -0.016887, -0.010436, 0.009936, -0.016670, 0.001933, -0.001515, 0.019056, -0.045091, 0.000436, -0.030998, 0.016388, 0.000635, -0.000281, 0.001216, -153.380762, 0.306216, 0.026506, 0.078022, -0.134646, 0.023240, 0.020318, 0.031588, -0.056715, -0.196788, -0.098938, 0.079428, -0.035735, 0.066842, 0.007514, 0.022396, 0.127740, -0.032051, 0.051397, -0.053784, 0.045789, 0.034002, -0.058258, -0.014383, 0.048884, 0.081933, 0.048566, -0.049301, -0.057377, -0.028975, 0.002940, 0.012196, -0.143321, -0.037178, 0.103666, 0.076062, -0.001887, 0.048194, 0.007214, 0.036579, 0.035662, 0.062613, -0.021670, -0.002831, -0.019900, -0.031887, 0.025399, -0.005399, -0.056007, 0.066942, 0.029537, 0.037241, 0.008339, -0.021189, -0.015463, 0.003503, 0.000644, 0.053221, -0.013040, 0.025726, -0.004456, -0.006706, 0.027750, -0.013503, -153.377913, -0.043684, 0.138993, 0.057123, -0.143557, 0.048793, -0.040853, 0.014083, 0.294809, -0.197595, -0.031615, 0.081388, -0.049338, 0.057740, 0.066570, 0.058612, 0.015390, -0.100662, 0.052695, 0.047541, 0.090617, -0.020463, 0.025762, -0.009719, 0.067060, 0.081325, -0.052305, -0.048203, 0.061915, 0.005408, 0.030944, 0.029437, -0.134701, -0.022296, 0.060744, -0.040826, -0.002477, -0.008394, 0.022132, 0.005771, 0.012132, 0.064383, 0.036053, -0.035544, 0.025672, -0.030154, -0.018711, -0.006996, 0.006461, 0.006969, -0.052405, 0.002532, -0.005726, 0.024755, -0.017015, 0.025045, 0.019710, 0.021243, -0.015717, 0.014737, 0.020907, -0.004955, 0.007613, -0.013421, 
};

__constant__ double A[64*64] = {
1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,0.980785,0.961940,0.906127,0.815493,0.693520,0.544895,0.375330,0.191342,0.923880,0.906127,0.853553,0.768178,0.653281,0.513280,0.353553,0.180240,0.831470,0.815493,0.768178,0.691342,0.587938,0.461940,0.318190,0.162212,0.707107,0.693520,0.653281,0.587938,0.500000,0.392847,0.270598,0.137950,0.555570,0.544895,0.513280,0.461940,0.392847,0.308658,0.212608,0.108386,0.382683,0.375330,0.353553,0.318190,0.270598,0.212608,0.146447,0.074658,0.195090,0.191342,0.180240,0.162212,0.137950,0.108386,0.074658,0.038060,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,0.980785,0.815493,0.375330,-0.191342,-0.693520,-0.961940,-0.906127,-0.544895,0.923880,0.768178,0.353553,-0.180240,-0.653281,-0.906127,-0.853553,-0.513280,0.831470,0.691342,0.318190,-0.162212,-0.587938,-0.815493,-0.768178,-0.461940,0.707107,0.587938,0.270598,-0.137950,-0.500000,-0.693520,-0.653281,-0.392847,0.555570,0.461940,0.212608,-0.108386,-0.392847,-0.544895,-0.513280,-0.308658,0.382683,0.318190,0.146447,-0.074658,-0.270598,-0.375330,-0.353553,-0.212608,0.195090,0.162212,0.074658,-0.038060,-0.137950,-0.191342,-0.180240,-0.108386,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,0.980785,0.544895,-0.375330,-0.961940,-0.693520,0.191342,0.906127,0.815493,0.923880,0.513280,-0.353553,-0.906127,-0.653281,0.180240,0.853553,0.768178,0.831470,0.461940,-0.318190,-0.815493,-0.587938,0.162212,0.768178,0.691342,0.707107,0.392847,-0.270598,-0.693520,-0.500000,0.137950,0.653281,0.587938,0.555570,0.308658,-0.212608,-0.544895,-0.392847,0.108386,0.513280,0.461940,0.382683,0.212608,-0.146447,-0.375330,-0.270598,0.074658,0.353553,0.318190,0.195090,0.108386,-0.074658,-0.191342,-0.137950,0.038060,0.180240,0.162212,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,0.980785,0.191342,-0.906127,-0.544895,0.693520,0.815493,-0.375330,-0.961940,0.923880,0.180240,-0.853553,-0.513280,0.653281,0.768178,-0.353553,-0.906127,0.831470,0.162212,-0.768178,-0.461940,0.587938,0.691342,-0.318190,-0.815493,0.707107,0.137950,-0.653281,-0.392847,0.500000,0.587938,-0.270598,-0.693520,0.555570,0.108386,-0.513280,-0.308658,0.392847,0.461940,-0.212608,-0.544895,0.382683,0.074658,-0.353553,-0.212608,0.270598,0.318190,-0.146447,-0.375330,0.195090,0.038060,-0.180240,-0.108386,0.137950,0.162212,-0.074658,-0.191342,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,0.980785,-0.191342,-0.906127,0.544895,0.693520,-0.815493,-0.375330,0.961940,0.923880,-0.180240,-0.853553,0.513280,0.653281,-0.768178,-0.353553,0.906127,0.831470,-0.162212,-0.768178,0.461940,0.587938,-0.691342,-0.318190,0.815493,0.707107,-0.137950,-0.653281,0.392847,0.500000,-0.587938,-0.270598,0.693520,0.555570,-0.108386,-0.513280,0.308658,0.392847,-0.461940,-0.212608,0.544895,0.382683,-0.074658,-0.353553,0.212608,0.270598,-0.318190,-0.146447,0.375330,0.195090,-0.038060,-0.180240,0.108386,0.137950,-0.162212,-0.074658,0.191342,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,0.980785,-0.544895,-0.375330,0.961940,-0.693520,-0.191342,0.906127,-0.815493,0.923880,-0.513280,-0.353553,0.906127,-0.653281,-0.180240,0.853553,-0.768178,0.831470,-0.461940,-0.318190,0.815493,-0.587938,-0.162212,0.768178,-0.691342,0.707107,-0.392847,-0.270598,0.693520,-0.500000,-0.137950,0.653281,-0.587938,0.555570,-0.308658,-0.212608,0.544895,-0.392847,-0.108386,0.513280,-0.461940,0.382683,-0.212608,-0.146447,0.375330,-0.270598,-0.074658,0.353553,-0.318190,0.195090,-0.108386,-0.074658,0.191342,-0.137950,-0.038060,0.180240,-0.162212,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,0.980785,-0.815493,0.375330,0.191342,-0.693520,0.961940,-0.906127,0.544895,0.923880,-0.768178,0.353553,0.180240,-0.653281,0.906127,-0.853553,0.513280,0.831470,-0.691342,0.318190,0.162212,-0.587938,0.815493,-0.768178,0.461940,0.707107,-0.587938,0.270598,0.137950,-0.500000,0.693520,-0.653281,0.392847,0.555570,-0.461940,0.212608,0.108386,-0.392847,0.544895,-0.513280,0.308658,0.382683,-0.318190,0.146447,0.074658,-0.270598,0.375330,-0.353553,0.212608,0.195090,-0.162212,0.074658,0.038060,-0.137950,0.191342,-0.180240,0.108386,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,0.980785,-0.961940,0.906127,-0.815493,0.693520,-0.544895,0.375330,-0.191342,0.923880,-0.906127,0.853553,-0.768178,0.653281,-0.513280,0.353553,-0.180240,0.831470,-0.815493,0.768178,-0.691342,0.587938,-0.461940,0.318190,-0.162212,0.707107,-0.693520,0.653281,-0.587938,0.500000,-0.392847,0.270598,-0.137950,0.555570,-0.544895,0.513280,-0.461940,0.392847,-0.308658,0.212608,-0.108386,0.382683,-0.375330,0.353553,-0.318190,0.270598,-0.212608,0.146447,-0.074658,0.195090,-0.191342,0.180240,-0.162212,0.137950,-0.108386,0.074658,-0.038060,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,0.831470,0.815493,0.768178,0.691342,0.587938,0.461940,0.318190,0.162212,0.382683,0.375330,0.353553,0.318190,0.270598,0.212608,0.146447,0.074658,-0.195090,-0.191342,-0.180240,-0.162212,-0.137950,-0.108386,-0.074658,-0.038060,-0.707107,-0.693520,-0.653281,-0.587938,-0.500000,-0.392847,-0.270598,-0.137950,-0.980785,-0.961940,-0.906127,-0.815493,-0.693520,-0.544895,-0.375330,-0.191342,-0.923880,-0.906127,-0.853553,-0.768178,-0.653281,-0.513280,-0.353553,-0.180240,-0.555570,-0.544895,-0.513280,-0.461940,-0.392847,-0.308658,-0.212608,-0.108386,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,0.831470,0.691342,0.318190,-0.162212,-0.587938,-0.815493,-0.768178,-0.461940,0.382683,0.318190,0.146447,-0.074658,-0.270598,-0.375330,-0.353553,-0.212608,-0.195090,-0.162212,-0.074658,0.038060,0.137950,0.191342,0.180240,0.108386,-0.707107,-0.587938,-0.270598,0.137950,0.500000,0.693520,0.653281,0.392847,-0.980785,-0.815493,-0.375330,0.191342,0.693520,0.961940,0.906127,0.544895,-0.923880,-0.768178,-0.353553,0.180240,0.653281,0.906127,0.853553,0.513280,-0.555570,-0.461940,-0.212608,0.108386,0.392847,0.544895,0.513280,0.308658,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,0.831470,0.461940,-0.318190,-0.815493,-0.587938,0.162212,0.768178,0.691342,0.382683,0.212608,-0.146447,-0.375330,-0.270598,0.074658,0.353553,0.318190,-0.195090,-0.108386,0.074658,0.191342,0.137950,-0.038060,-0.180240,-0.162212,-0.707107,-0.392847,0.270598,0.693520,0.500000,-0.137950,-0.653281,-0.587938,-0.980785,-0.544895,0.375330,0.961940,0.693520,-0.191342,-0.906127,-0.815493,-0.923880,-0.513280,0.353553,0.906127,0.653281,-0.180240,-0.853553,-0.768178,-0.555570,-0.308658,0.212608,0.544895,0.392847,-0.108386,-0.513280,-0.461940,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,0.831470,0.162212,-0.768178,-0.461940,0.587938,0.691342,-0.318190,-0.815493,0.382683,0.074658,-0.353553,-0.212608,0.270598,0.318190,-0.146447,-0.375330,-0.195090,-0.038060,0.180240,0.108386,-0.137950,-0.162212,0.074658,0.191342,-0.707107,-0.137950,0.653281,0.392847,-0.500000,-0.587938,0.270598,0.693520,-0.980785,-0.191342,0.906127,0.544895,-0.693520,-0.815493,0.375330,0.961940,-0.923880,-0.180240,0.853553,0.513280,-0.653281,-0.768178,0.353553,0.906127,-0.555570,-0.108386,0.513280,0.308658,-0.392847,-0.461940,0.212608,0.544895,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,0.831470,-0.162212,-0.768178,0.461940,0.587938,-0.691342,-0.318190,0.815493,0.382683,-0.074658,-0.353553,0.212608,0.270598,-0.318190,-0.146447,0.375330,-0.195090,0.038060,0.180240,-0.108386,-0.137950,0.162212,0.074658,-0.191342,-0.707107,0.137950,0.653281,-0.392847,-0.500000,0.587938,0.270598,-0.693520,-0.980785,0.191342,0.906127,-0.544895,-0.693520,0.815493,0.375330,-0.961940,-0.923880,0.180240,0.853553,-0.513280,-0.653281,0.768178,0.353553,-0.906127,-0.555570,0.108386,0.513280,-0.308658,-0.392847,0.461940,0.212608,-0.544895,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,0.831470,-0.461940,-0.318190,0.815493,-0.587938,-0.162212,0.768178,-0.691342,0.382683,-0.212608,-0.146447,0.375330,-0.270598,-0.074658,0.353553,-0.318190,-0.195090,0.108386,0.074658,-0.191342,0.137950,0.038060,-0.180240,0.162212,-0.707107,0.392847,0.270598,-0.693520,0.500000,0.137950,-0.653281,0.587938,-0.980785,0.544895,0.375330,-0.961940,0.693520,0.191342,-0.906127,0.815493,-0.923880,0.513280,0.353553,-0.906127,0.653281,0.180240,-0.853553,0.768178,-0.555570,0.308658,0.212608,-0.544895,0.392847,0.108386,-0.513280,0.461940,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,0.831470,-0.691342,0.318190,0.162212,-0.587938,0.815493,-0.768178,0.461940,0.382683,-0.318190,0.146447,0.074658,-0.270598,0.375330,-0.353553,0.212608,-0.195090,0.162212,-0.074658,-0.038060,0.137950,-0.191342,0.180240,-0.108386,-0.707107,0.587938,-0.270598,-0.137950,0.500000,-0.693520,0.653281,-0.392847,-0.980785,0.815493,-0.375330,-0.191342,0.693520,-0.961940,0.906127,-0.544895,-0.923880,0.768178,-0.353553,-0.180240,0.653281,-0.906127,0.853553,-0.513280,-0.555570,0.461940,-0.212608,-0.108386,0.392847,-0.544895,0.513280,-0.308658,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,0.831470,-0.815493,0.768178,-0.691342,0.587938,-0.461940,0.318190,-0.162212,0.382683,-0.375330,0.353553,-0.318190,0.270598,-0.212608,0.146447,-0.074658,-0.195090,0.191342,-0.180240,0.162212,-0.137950,0.108386,-0.074658,0.038060,-0.707107,0.693520,-0.653281,0.587938,-0.500000,0.392847,-0.270598,0.137950,-0.980785,0.961940,-0.906127,0.815493,-0.693520,0.544895,-0.375330,0.191342,-0.923880,0.906127,-0.853553,0.768178,-0.653281,0.513280,-0.353553,0.180240,-0.555570,0.544895,-0.513280,0.461940,-0.392847,0.308658,-0.212608,0.108386,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,0.555570,0.544895,0.513280,0.461940,0.392847,0.308658,0.212608,0.108386,-0.382683,-0.375330,-0.353553,-0.318190,-0.270598,-0.212608,-0.146447,-0.074658,-0.980785,-0.961940,-0.906127,-0.815493,-0.693520,-0.544895,-0.375330,-0.191342,-0.707107,-0.693520,-0.653281,-0.587938,-0.500000,-0.392847,-0.270598,-0.137950,0.195090,0.191342,0.180240,0.162212,0.137950,0.108386,0.074658,0.038060,0.923880,0.906127,0.853553,0.768178,0.653281,0.513280,0.353553,0.180240,0.831470,0.815493,0.768178,0.691342,0.587938,0.461940,0.318190,0.162212,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,0.555570,0.461940,0.212608,-0.108386,-0.392847,-0.544895,-0.513280,-0.308658,-0.382683,-0.318190,-0.146447,0.074658,0.270598,0.375330,0.353553,0.212608,-0.980785,-0.815493,-0.375330,0.191342,0.693520,0.961940,0.906127,0.544895,-0.707107,-0.587938,-0.270598,0.137950,0.500000,0.693520,0.653281,0.392847,0.195090,0.162212,0.074658,-0.038060,-0.137950,-0.191342,-0.180240,-0.108386,0.923880,0.768178,0.353553,-0.180240,-0.653281,-0.906127,-0.853553,-0.513280,0.831470,0.691342,0.318190,-0.162212,-0.587938,-0.815493,-0.768178,-0.461940,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,0.555570,0.308658,-0.212608,-0.544895,-0.392847,0.108386,0.513280,0.461940,-0.382683,-0.212608,0.146447,0.375330,0.270598,-0.074658,-0.353553,-0.318190,-0.980785,-0.544895,0.375330,0.961940,0.693520,-0.191342,-0.906127,-0.815493,-0.707107,-0.392847,0.270598,0.693520,0.500000,-0.137950,-0.653281,-0.587938,0.195090,0.108386,-0.074658,-0.191342,-0.137950,0.038060,0.180240,0.162212,0.923880,0.513280,-0.353553,-0.906127,-0.653281,0.180240,0.853553,0.768178,0.831470,0.461940,-0.318190,-0.815493,-0.587938,0.162212,0.768178,0.691342,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,0.555570,0.108386,-0.513280,-0.308658,0.392847,0.461940,-0.212608,-0.544895,-0.382683,-0.074658,0.353553,0.212608,-0.270598,-0.318190,0.146447,0.375330,-0.980785,-0.191342,0.906127,0.544895,-0.693520,-0.815493,0.375330,0.961940,-0.707107,-0.137950,0.653281,0.392847,-0.500000,-0.587938,0.270598,0.693520,0.195090,0.038060,-0.180240,-0.108386,0.137950,0.162212,-0.074658,-0.191342,0.923880,0.180240,-0.853553,-0.513280,0.653281,0.768178,-0.353553,-0.906127,0.831470,0.162212,-0.768178,-0.461940,0.587938,0.691342,-0.318190,-0.815493,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,0.555570,-0.108386,-0.513280,0.308658,0.392847,-0.461940,-0.212608,0.544895,-0.382683,0.074658,0.353553,-0.212608,-0.270598,0.318190,0.146447,-0.375330,-0.980785,0.191342,0.906127,-0.544895,-0.693520,0.815493,0.375330,-0.961940,-0.707107,0.137950,0.653281,-0.392847,-0.500000,0.587938,0.270598,-0.693520,0.195090,-0.038060,-0.180240,0.108386,0.137950,-0.162212,-0.074658,0.191342,0.923880,-0.180240,-0.853553,0.513280,0.653281,-0.768178,-0.353553,0.906127,0.831470,-0.162212,-0.768178,0.461940,0.587938,-0.691342,-0.318190,0.815493,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,0.555570,-0.308658,-0.212608,0.544895,-0.392847,-0.108386,0.513280,-0.461940,-0.382683,0.212608,0.146447,-0.375330,0.270598,0.074658,-0.353553,0.318190,-0.980785,0.544895,0.375330,-0.961940,0.693520,0.191342,-0.906127,0.815493,-0.707107,0.392847,0.270598,-0.693520,0.500000,0.137950,-0.653281,0.587938,0.195090,-0.108386,-0.074658,0.191342,-0.137950,-0.038060,0.180240,-0.162212,0.923880,-0.513280,-0.353553,0.906127,-0.653281,-0.180240,0.853553,-0.768178,0.831470,-0.461940,-0.318190,0.815493,-0.587938,-0.162212,0.768178,-0.691342,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,0.555570,-0.461940,0.212608,0.108386,-0.392847,0.544895,-0.513280,0.308658,-0.382683,0.318190,-0.146447,-0.074658,0.270598,-0.375330,0.353553,-0.212608,-0.980785,0.815493,-0.375330,-0.191342,0.693520,-0.961940,0.906127,-0.544895,-0.707107,0.587938,-0.270598,-0.137950,0.500000,-0.693520,0.653281,-0.392847,0.195090,-0.162212,0.074658,0.038060,-0.137950,0.191342,-0.180240,0.108386,0.923880,-0.768178,0.353553,0.180240,-0.653281,0.906127,-0.853553,0.513280,0.831470,-0.691342,0.318190,0.162212,-0.587938,0.815493,-0.768178,0.461940,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,0.555570,-0.544895,0.513280,-0.461940,0.392847,-0.308658,0.212608,-0.108386,-0.382683,0.375330,-0.353553,0.318190,-0.270598,0.212608,-0.146447,0.074658,-0.980785,0.961940,-0.906127,0.815493,-0.693520,0.544895,-0.375330,0.191342,-0.707107,0.693520,-0.653281,0.587938,-0.500000,0.392847,-0.270598,0.137950,0.195090,-0.191342,0.180240,-0.162212,0.137950,-0.108386,0.074658,-0.038060,0.923880,-0.906127,0.853553,-0.768178,0.653281,-0.513280,0.353553,-0.180240,0.831470,-0.815493,0.768178,-0.691342,0.587938,-0.461940,0.318190,-0.162212,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,0.195090,0.191342,0.180240,0.162212,0.137950,0.108386,0.074658,0.038060,-0.923880,-0.906127,-0.853553,-0.768178,-0.653281,-0.513280,-0.353553,-0.180240,-0.555570,-0.544895,-0.513280,-0.461940,-0.392847,-0.308658,-0.212608,-0.108386,0.707107,0.693520,0.653281,0.587938,0.500000,0.392847,0.270598,0.137950,0.831470,0.815493,0.768178,0.691342,0.587938,0.461940,0.318190,0.162212,-0.382683,-0.375330,-0.353553,-0.318190,-0.270598,-0.212608,-0.146447,-0.074658,-0.980785,-0.961940,-0.906127,-0.815493,-0.693520,-0.544895,-0.375330,-0.191342,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,0.195090,0.162212,0.074658,-0.038060,-0.137950,-0.191342,-0.180240,-0.108386,-0.923880,-0.768178,-0.353553,0.180240,0.653281,0.906127,0.853553,0.513280,-0.555570,-0.461940,-0.212608,0.108386,0.392847,0.544895,0.513280,0.308658,0.707107,0.587938,0.270598,-0.137950,-0.500000,-0.693520,-0.653281,-0.392847,0.831470,0.691342,0.318190,-0.162212,-0.587938,-0.815493,-0.768178,-0.461940,-0.382683,-0.318190,-0.146447,0.074658,0.270598,0.375330,0.353553,0.212608,-0.980785,-0.815493,-0.375330,0.191342,0.693520,0.961940,0.906127,0.544895,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,0.195090,0.108386,-0.074658,-0.191342,-0.137950,0.038060,0.180240,0.162212,-0.923880,-0.513280,0.353553,0.906127,0.653281,-0.180240,-0.853553,-0.768178,-0.555570,-0.308658,0.212608,0.544895,0.392847,-0.108386,-0.513280,-0.461940,0.707107,0.392847,-0.270598,-0.693520,-0.500000,0.137950,0.653281,0.587938,0.831470,0.461940,-0.318190,-0.815493,-0.587938,0.162212,0.768178,0.691342,-0.382683,-0.212608,0.146447,0.375330,0.270598,-0.074658,-0.353553,-0.318190,-0.980785,-0.544895,0.375330,0.961940,0.693520,-0.191342,-0.906127,-0.815493,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,0.195090,0.038060,-0.180240,-0.108386,0.137950,0.162212,-0.074658,-0.191342,-0.923880,-0.180240,0.853553,0.513280,-0.653281,-0.768178,0.353553,0.906127,-0.555570,-0.108386,0.513280,0.308658,-0.392847,-0.461940,0.212608,0.544895,0.707107,0.137950,-0.653281,-0.392847,0.500000,0.587938,-0.270598,-0.693520,0.831470,0.162212,-0.768178,-0.461940,0.587938,0.691342,-0.318190,-0.815493,-0.382683,-0.074658,0.353553,0.212608,-0.270598,-0.318190,0.146447,0.375330,-0.980785,-0.191342,0.906127,0.544895,-0.693520,-0.815493,0.375330,0.961940,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,0.195090,-0.038060,-0.180240,0.108386,0.137950,-0.162212,-0.074658,0.191342,-0.923880,0.180240,0.853553,-0.513280,-0.653281,0.768178,0.353553,-0.906127,-0.555570,0.108386,0.513280,-0.308658,-0.392847,0.461940,0.212608,-0.544895,0.707107,-0.137950,-0.653281,0.392847,0.500000,-0.587938,-0.270598,0.693520,0.831470,-0.162212,-0.768178,0.461940,0.587938,-0.691342,-0.318190,0.815493,-0.382683,0.074658,0.353553,-0.212608,-0.270598,0.318190,0.146447,-0.375330,-0.980785,0.191342,0.906127,-0.544895,-0.693520,0.815493,0.375330,-0.961940,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,0.195090,-0.108386,-0.074658,0.191342,-0.137950,-0.038060,0.180240,-0.162212,-0.923880,0.513280,0.353553,-0.906127,0.653281,0.180240,-0.853553,0.768178,-0.555570,0.308658,0.212608,-0.544895,0.392847,0.108386,-0.513280,0.461940,0.707107,-0.392847,-0.270598,0.693520,-0.500000,-0.137950,0.653281,-0.587938,0.831470,-0.461940,-0.318190,0.815493,-0.587938,-0.162212,0.768178,-0.691342,-0.382683,0.212608,0.146447,-0.375330,0.270598,0.074658,-0.353553,0.318190,-0.980785,0.544895,0.375330,-0.961940,0.693520,0.191342,-0.906127,0.815493,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,0.195090,-0.162212,0.074658,0.038060,-0.137950,0.191342,-0.180240,0.108386,-0.923880,0.768178,-0.353553,-0.180240,0.653281,-0.906127,0.853553,-0.513280,-0.555570,0.461940,-0.212608,-0.108386,0.392847,-0.544895,0.513280,-0.308658,0.707107,-0.587938,0.270598,0.137950,-0.500000,0.693520,-0.653281,0.392847,0.831470,-0.691342,0.318190,0.162212,-0.587938,0.815493,-0.768178,0.461940,-0.382683,0.318190,-0.146447,-0.074658,0.270598,-0.375330,0.353553,-0.212608,-0.980785,0.815493,-0.375330,-0.191342,0.693520,-0.961940,0.906127,-0.544895,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,0.195090,-0.191342,0.180240,-0.162212,0.137950,-0.108386,0.074658,-0.038060,-0.923880,0.906127,-0.853553,0.768178,-0.653281,0.513280,-0.353553,0.180240,-0.555570,0.544895,-0.513280,0.461940,-0.392847,0.308658,-0.212608,0.108386,0.707107,-0.693520,0.653281,-0.587938,0.500000,-0.392847,0.270598,-0.137950,0.831470,-0.815493,0.768178,-0.691342,0.587938,-0.461940,0.318190,-0.162212,-0.382683,0.375330,-0.353553,0.318190,-0.270598,0.212608,-0.146447,0.074658,-0.980785,0.961940,-0.906127,0.815493,-0.693520,0.544895,-0.375330,0.191342,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,-0.195090,-0.191342,-0.180240,-0.162212,-0.137950,-0.108386,-0.074658,-0.038060,-0.923880,-0.906127,-0.853553,-0.768178,-0.653281,-0.513280,-0.353553,-0.180240,0.555570,0.544895,0.513280,0.461940,0.392847,0.308658,0.212608,0.108386,0.707107,0.693520,0.653281,0.587938,0.500000,0.392847,0.270598,0.137950,-0.831470,-0.815493,-0.768178,-0.691342,-0.587938,-0.461940,-0.318190,-0.162212,-0.382683,-0.375330,-0.353553,-0.318190,-0.270598,-0.212608,-0.146447,-0.074658,0.980785,0.961940,0.906127,0.815493,0.693520,0.544895,0.375330,0.191342,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,-0.195090,-0.162212,-0.074658,0.038060,0.137950,0.191342,0.180240,0.108386,-0.923880,-0.768178,-0.353553,0.180240,0.653281,0.906127,0.853553,0.513280,0.555570,0.461940,0.212608,-0.108386,-0.392847,-0.544895,-0.513280,-0.308658,0.707107,0.587938,0.270598,-0.137950,-0.500000,-0.693520,-0.653281,-0.392847,-0.831470,-0.691342,-0.318190,0.162212,0.587938,0.815493,0.768178,0.461940,-0.382683,-0.318190,-0.146447,0.074658,0.270598,0.375330,0.353553,0.212608,0.980785,0.815493,0.375330,-0.191342,-0.693520,-0.961940,-0.906127,-0.544895,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,-0.195090,-0.108386,0.074658,0.191342,0.137950,-0.038060,-0.180240,-0.162212,-0.923880,-0.513280,0.353553,0.906127,0.653281,-0.180240,-0.853553,-0.768178,0.555570,0.308658,-0.212608,-0.544895,-0.392847,0.108386,0.513280,0.461940,0.707107,0.392847,-0.270598,-0.693520,-0.500000,0.137950,0.653281,0.587938,-0.831470,-0.461940,0.318190,0.815493,0.587938,-0.162212,-0.768178,-0.691342,-0.382683,-0.212608,0.146447,0.375330,0.270598,-0.074658,-0.353553,-0.318190,0.980785,0.544895,-0.375330,-0.961940,-0.693520,0.191342,0.906127,0.815493,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,-0.195090,-0.038060,0.180240,0.108386,-0.137950,-0.162212,0.074658,0.191342,-0.923880,-0.180240,0.853553,0.513280,-0.653281,-0.768178,0.353553,0.906127,0.555570,0.108386,-0.513280,-0.308658,0.392847,0.461940,-0.212608,-0.544895,0.707107,0.137950,-0.653281,-0.392847,0.500000,0.587938,-0.270598,-0.693520,-0.831470,-0.162212,0.768178,0.461940,-0.587938,-0.691342,0.318190,0.815493,-0.382683,-0.074658,0.353553,0.212608,-0.270598,-0.318190,0.146447,0.375330,0.980785,0.191342,-0.906127,-0.544895,0.693520,0.815493,-0.375330,-0.961940,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,-0.195090,0.038060,0.180240,-0.108386,-0.137950,0.162212,0.074658,-0.191342,-0.923880,0.180240,0.853553,-0.513280,-0.653281,0.768178,0.353553,-0.906127,0.555570,-0.108386,-0.513280,0.308658,0.392847,-0.461940,-0.212608,0.544895,0.707107,-0.137950,-0.653281,0.392847,0.500000,-0.587938,-0.270598,0.693520,-0.831470,0.162212,0.768178,-0.461940,-0.587938,0.691342,0.318190,-0.815493,-0.382683,0.074658,0.353553,-0.212608,-0.270598,0.318190,0.146447,-0.375330,0.980785,-0.191342,-0.906127,0.544895,0.693520,-0.815493,-0.375330,0.961940,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,-0.195090,0.108386,0.074658,-0.191342,0.137950,0.038060,-0.180240,0.162212,-0.923880,0.513280,0.353553,-0.906127,0.653281,0.180240,-0.853553,0.768178,0.555570,-0.308658,-0.212608,0.544895,-0.392847,-0.108386,0.513280,-0.461940,0.707107,-0.392847,-0.270598,0.693520,-0.500000,-0.137950,0.653281,-0.587938,-0.831470,0.461940,0.318190,-0.815493,0.587938,0.162212,-0.768178,0.691342,-0.382683,0.212608,0.146447,-0.375330,0.270598,0.074658,-0.353553,0.318190,0.980785,-0.544895,-0.375330,0.961940,-0.693520,-0.191342,0.906127,-0.815493,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,-0.195090,0.162212,-0.074658,-0.038060,0.137950,-0.191342,0.180240,-0.108386,-0.923880,0.768178,-0.353553,-0.180240,0.653281,-0.906127,0.853553,-0.513280,0.555570,-0.461940,0.212608,0.108386,-0.392847,0.544895,-0.513280,0.308658,0.707107,-0.587938,0.270598,0.137950,-0.500000,0.693520,-0.653281,0.392847,-0.831470,0.691342,-0.318190,-0.162212,0.587938,-0.815493,0.768178,-0.461940,-0.382683,0.318190,-0.146447,-0.074658,0.270598,-0.375330,0.353553,-0.212608,0.980785,-0.815493,0.375330,0.191342,-0.693520,0.961940,-0.906127,0.544895,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,-0.195090,0.191342,-0.180240,0.162212,-0.137950,0.108386,-0.074658,0.038060,-0.923880,0.906127,-0.853553,0.768178,-0.653281,0.513280,-0.353553,0.180240,0.555570,-0.544895,0.513280,-0.461940,0.392847,-0.308658,0.212608,-0.108386,0.707107,-0.693520,0.653281,-0.587938,0.500000,-0.392847,0.270598,-0.137950,-0.831470,0.815493,-0.768178,0.691342,-0.587938,0.461940,-0.318190,0.162212,-0.382683,0.375330,-0.353553,0.318190,-0.270598,0.212608,-0.146447,0.074658,0.980785,-0.961940,0.906127,-0.815493,0.693520,-0.544895,0.375330,-0.191342,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,-0.555570,-0.544895,-0.513280,-0.461940,-0.392847,-0.308658,-0.212608,-0.108386,-0.382683,-0.375330,-0.353553,-0.318190,-0.270598,-0.212608,-0.146447,-0.074658,0.980785,0.961940,0.906127,0.815493,0.693520,0.544895,0.375330,0.191342,-0.707107,-0.693520,-0.653281,-0.587938,-0.500000,-0.392847,-0.270598,-0.137950,-0.195090,-0.191342,-0.180240,-0.162212,-0.137950,-0.108386,-0.074658,-0.038060,0.923880,0.906127,0.853553,0.768178,0.653281,0.513280,0.353553,0.180240,-0.831470,-0.815493,-0.768178,-0.691342,-0.587938,-0.461940,-0.318190,-0.162212,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,-0.555570,-0.461940,-0.212608,0.108386,0.392847,0.544895,0.513280,0.308658,-0.382683,-0.318190,-0.146447,0.074658,0.270598,0.375330,0.353553,0.212608,0.980785,0.815493,0.375330,-0.191342,-0.693520,-0.961940,-0.906127,-0.544895,-0.707107,-0.587938,-0.270598,0.137950,0.500000,0.693520,0.653281,0.392847,-0.195090,-0.162212,-0.074658,0.038060,0.137950,0.191342,0.180240,0.108386,0.923880,0.768178,0.353553,-0.180240,-0.653281,-0.906127,-0.853553,-0.513280,-0.831470,-0.691342,-0.318190,0.162212,0.587938,0.815493,0.768178,0.461940,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,-0.555570,-0.308658,0.212608,0.544895,0.392847,-0.108386,-0.513280,-0.461940,-0.382683,-0.212608,0.146447,0.375330,0.270598,-0.074658,-0.353553,-0.318190,0.980785,0.544895,-0.375330,-0.961940,-0.693520,0.191342,0.906127,0.815493,-0.707107,-0.392847,0.270598,0.693520,0.500000,-0.137950,-0.653281,-0.587938,-0.195090,-0.108386,0.074658,0.191342,0.137950,-0.038060,-0.180240,-0.162212,0.923880,0.513280,-0.353553,-0.906127,-0.653281,0.180240,0.853553,0.768178,-0.831470,-0.461940,0.318190,0.815493,0.587938,-0.162212,-0.768178,-0.691342,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,-0.555570,-0.108386,0.513280,0.308658,-0.392847,-0.461940,0.212608,0.544895,-0.382683,-0.074658,0.353553,0.212608,-0.270598,-0.318190,0.146447,0.375330,0.980785,0.191342,-0.906127,-0.544895,0.693520,0.815493,-0.375330,-0.961940,-0.707107,-0.137950,0.653281,0.392847,-0.500000,-0.587938,0.270598,0.693520,-0.195090,-0.038060,0.180240,0.108386,-0.137950,-0.162212,0.074658,0.191342,0.923880,0.180240,-0.853553,-0.513280,0.653281,0.768178,-0.353553,-0.906127,-0.831470,-0.162212,0.768178,0.461940,-0.587938,-0.691342,0.318190,0.815493,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,-0.555570,0.108386,0.513280,-0.308658,-0.392847,0.461940,0.212608,-0.544895,-0.382683,0.074658,0.353553,-0.212608,-0.270598,0.318190,0.146447,-0.375330,0.980785,-0.191342,-0.906127,0.544895,0.693520,-0.815493,-0.375330,0.961940,-0.707107,0.137950,0.653281,-0.392847,-0.500000,0.587938,0.270598,-0.693520,-0.195090,0.038060,0.180240,-0.108386,-0.137950,0.162212,0.074658,-0.191342,0.923880,-0.180240,-0.853553,0.513280,0.653281,-0.768178,-0.353553,0.906127,-0.831470,0.162212,0.768178,-0.461940,-0.587938,0.691342,0.318190,-0.815493,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,-0.555570,0.308658,0.212608,-0.544895,0.392847,0.108386,-0.513280,0.461940,-0.382683,0.212608,0.146447,-0.375330,0.270598,0.074658,-0.353553,0.318190,0.980785,-0.544895,-0.375330,0.961940,-0.693520,-0.191342,0.906127,-0.815493,-0.707107,0.392847,0.270598,-0.693520,0.500000,0.137950,-0.653281,0.587938,-0.195090,0.108386,0.074658,-0.191342,0.137950,0.038060,-0.180240,0.162212,0.923880,-0.513280,-0.353553,0.906127,-0.653281,-0.180240,0.853553,-0.768178,-0.831470,0.461940,0.318190,-0.815493,0.587938,0.162212,-0.768178,0.691342,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,-0.555570,0.461940,-0.212608,-0.108386,0.392847,-0.544895,0.513280,-0.308658,-0.382683,0.318190,-0.146447,-0.074658,0.270598,-0.375330,0.353553,-0.212608,0.980785,-0.815493,0.375330,0.191342,-0.693520,0.961940,-0.906127,0.544895,-0.707107,0.587938,-0.270598,-0.137950,0.500000,-0.693520,0.653281,-0.392847,-0.195090,0.162212,-0.074658,-0.038060,0.137950,-0.191342,0.180240,-0.108386,0.923880,-0.768178,0.353553,0.180240,-0.653281,0.906127,-0.853553,0.513280,-0.831470,0.691342,-0.318190,-0.162212,0.587938,-0.815493,0.768178,-0.461940,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,-0.555570,0.544895,-0.513280,0.461940,-0.392847,0.308658,-0.212608,0.108386,-0.382683,0.375330,-0.353553,0.318190,-0.270598,0.212608,-0.146447,0.074658,0.980785,-0.961940,0.906127,-0.815493,0.693520,-0.544895,0.375330,-0.191342,-0.707107,0.693520,-0.653281,0.587938,-0.500000,0.392847,-0.270598,0.137950,-0.195090,0.191342,-0.180240,0.162212,-0.137950,0.108386,-0.074658,0.038060,0.923880,-0.906127,0.853553,-0.768178,0.653281,-0.513280,0.353553,-0.180240,-0.831470,0.815493,-0.768178,0.691342,-0.587938,0.461940,-0.318190,0.162212,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,-0.831470,-0.815493,-0.768178,-0.691342,-0.587938,-0.461940,-0.318190,-0.162212,0.382683,0.375330,0.353553,0.318190,0.270598,0.212608,0.146447,0.074658,0.195090,0.191342,0.180240,0.162212,0.137950,0.108386,0.074658,0.038060,-0.707107,-0.693520,-0.653281,-0.587938,-0.500000,-0.392847,-0.270598,-0.137950,0.980785,0.961940,0.906127,0.815493,0.693520,0.544895,0.375330,0.191342,-0.923880,-0.906127,-0.853553,-0.768178,-0.653281,-0.513280,-0.353553,-0.180240,0.555570,0.544895,0.513280,0.461940,0.392847,0.308658,0.212608,0.108386,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,-0.831470,-0.691342,-0.318190,0.162212,0.587938,0.815493,0.768178,0.461940,0.382683,0.318190,0.146447,-0.074658,-0.270598,-0.375330,-0.353553,-0.212608,0.195090,0.162212,0.074658,-0.038060,-0.137950,-0.191342,-0.180240,-0.108386,-0.707107,-0.587938,-0.270598,0.137950,0.500000,0.693520,0.653281,0.392847,0.980785,0.815493,0.375330,-0.191342,-0.693520,-0.961940,-0.906127,-0.544895,-0.923880,-0.768178,-0.353553,0.180240,0.653281,0.906127,0.853553,0.513280,0.555570,0.461940,0.212608,-0.108386,-0.392847,-0.544895,-0.513280,-0.308658,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,-0.831470,-0.461940,0.318190,0.815493,0.587938,-0.162212,-0.768178,-0.691342,0.382683,0.212608,-0.146447,-0.375330,-0.270598,0.074658,0.353553,0.318190,0.195090,0.108386,-0.074658,-0.191342,-0.137950,0.038060,0.180240,0.162212,-0.707107,-0.392847,0.270598,0.693520,0.500000,-0.137950,-0.653281,-0.587938,0.980785,0.544895,-0.375330,-0.961940,-0.693520,0.191342,0.906127,0.815493,-0.923880,-0.513280,0.353553,0.906127,0.653281,-0.180240,-0.853553,-0.768178,0.555570,0.308658,-0.212608,-0.544895,-0.392847,0.108386,0.513280,0.461940,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,-0.831470,-0.162212,0.768178,0.461940,-0.587938,-0.691342,0.318190,0.815493,0.382683,0.074658,-0.353553,-0.212608,0.270598,0.318190,-0.146447,-0.375330,0.195090,0.038060,-0.180240,-0.108386,0.137950,0.162212,-0.074658,-0.191342,-0.707107,-0.137950,0.653281,0.392847,-0.500000,-0.587938,0.270598,0.693520,0.980785,0.191342,-0.906127,-0.544895,0.693520,0.815493,-0.375330,-0.961940,-0.923880,-0.180240,0.853553,0.513280,-0.653281,-0.768178,0.353553,0.906127,0.555570,0.108386,-0.513280,-0.308658,0.392847,0.461940,-0.212608,-0.544895,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,-0.831470,0.162212,0.768178,-0.461940,-0.587938,0.691342,0.318190,-0.815493,0.382683,-0.074658,-0.353553,0.212608,0.270598,-0.318190,-0.146447,0.375330,0.195090,-0.038060,-0.180240,0.108386,0.137950,-0.162212,-0.074658,0.191342,-0.707107,0.137950,0.653281,-0.392847,-0.500000,0.587938,0.270598,-0.693520,0.980785,-0.191342,-0.906127,0.544895,0.693520,-0.815493,-0.375330,0.961940,-0.923880,0.180240,0.853553,-0.513280,-0.653281,0.768178,0.353553,-0.906127,0.555570,-0.108386,-0.513280,0.308658,0.392847,-0.461940,-0.212608,0.544895,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,-0.831470,0.461940,0.318190,-0.815493,0.587938,0.162212,-0.768178,0.691342,0.382683,-0.212608,-0.146447,0.375330,-0.270598,-0.074658,0.353553,-0.318190,0.195090,-0.108386,-0.074658,0.191342,-0.137950,-0.038060,0.180240,-0.162212,-0.707107,0.392847,0.270598,-0.693520,0.500000,0.137950,-0.653281,0.587938,0.980785,-0.544895,-0.375330,0.961940,-0.693520,-0.191342,0.906127,-0.815493,-0.923880,0.513280,0.353553,-0.906127,0.653281,0.180240,-0.853553,0.768178,0.555570,-0.308658,-0.212608,0.544895,-0.392847,-0.108386,0.513280,-0.461940,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,-0.831470,0.691342,-0.318190,-0.162212,0.587938,-0.815493,0.768178,-0.461940,0.382683,-0.318190,0.146447,0.074658,-0.270598,0.375330,-0.353553,0.212608,0.195090,-0.162212,0.074658,0.038060,-0.137950,0.191342,-0.180240,0.108386,-0.707107,0.587938,-0.270598,-0.137950,0.500000,-0.693520,0.653281,-0.392847,0.980785,-0.815493,0.375330,0.191342,-0.693520,0.961940,-0.906127,0.544895,-0.923880,0.768178,-0.353553,-0.180240,0.653281,-0.906127,0.853553,-0.513280,0.555570,-0.461940,0.212608,0.108386,-0.392847,0.544895,-0.513280,0.308658,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,-0.831470,0.815493,-0.768178,0.691342,-0.587938,0.461940,-0.318190,0.162212,0.382683,-0.375330,0.353553,-0.318190,0.270598,-0.212608,0.146447,-0.074658,0.195090,-0.191342,0.180240,-0.162212,0.137950,-0.108386,0.074658,-0.038060,-0.707107,0.693520,-0.653281,0.587938,-0.500000,0.392847,-0.270598,0.137950,0.980785,-0.961940,0.906127,-0.815493,0.693520,-0.544895,0.375330,-0.191342,-0.923880,0.906127,-0.853553,0.768178,-0.653281,0.513280,-0.353553,0.180240,0.555570,-0.544895,0.513280,-0.461940,0.392847,-0.308658,0.212608,-0.108386,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,-0.980785,-0.961940,-0.906127,-0.815493,-0.693520,-0.544895,-0.375330,-0.191342,0.923880,0.906127,0.853553,0.768178,0.653281,0.513280,0.353553,0.180240,-0.831470,-0.815493,-0.768178,-0.691342,-0.587938,-0.461940,-0.318190,-0.162212,0.707107,0.693520,0.653281,0.587938,0.500000,0.392847,0.270598,0.137950,-0.555570,-0.544895,-0.513280,-0.461940,-0.392847,-0.308658,-0.212608,-0.108386,0.382683,0.375330,0.353553,0.318190,0.270598,0.212608,0.146447,0.074658,-0.195090,-0.191342,-0.180240,-0.162212,-0.137950,-0.108386,-0.074658,-0.038060,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,-0.980785,-0.815493,-0.375330,0.191342,0.693520,0.961940,0.906127,0.544895,0.923880,0.768178,0.353553,-0.180240,-0.653281,-0.906127,-0.853553,-0.513280,-0.831470,-0.691342,-0.318190,0.162212,0.587938,0.815493,0.768178,0.461940,0.707107,0.587938,0.270598,-0.137950,-0.500000,-0.693520,-0.653281,-0.392847,-0.555570,-0.461940,-0.212608,0.108386,0.392847,0.544895,0.513280,0.308658,0.382683,0.318190,0.146447,-0.074658,-0.270598,-0.375330,-0.353553,-0.212608,-0.195090,-0.162212,-0.074658,0.038060,0.137950,0.191342,0.180240,0.108386,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,-0.980785,-0.544895,0.375330,0.961940,0.693520,-0.191342,-0.906127,-0.815493,0.923880,0.513280,-0.353553,-0.906127,-0.653281,0.180240,0.853553,0.768178,-0.831470,-0.461940,0.318190,0.815493,0.587938,-0.162212,-0.768178,-0.691342,0.707107,0.392847,-0.270598,-0.693520,-0.500000,0.137950,0.653281,0.587938,-0.555570,-0.308658,0.212608,0.544895,0.392847,-0.108386,-0.513280,-0.461940,0.382683,0.212608,-0.146447,-0.375330,-0.270598,0.074658,0.353553,0.318190,-0.195090,-0.108386,0.074658,0.191342,0.137950,-0.038060,-0.180240,-0.162212,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,-0.980785,-0.191342,0.906127,0.544895,-0.693520,-0.815493,0.375330,0.961940,0.923880,0.180240,-0.853553,-0.513280,0.653281,0.768178,-0.353553,-0.906127,-0.831470,-0.162212,0.768178,0.461940,-0.587938,-0.691342,0.318190,0.815493,0.707107,0.137950,-0.653281,-0.392847,0.500000,0.587938,-0.270598,-0.693520,-0.555570,-0.108386,0.513280,0.308658,-0.392847,-0.461940,0.212608,0.544895,0.382683,0.074658,-0.353553,-0.212608,0.270598,0.318190,-0.146447,-0.375330,-0.195090,-0.038060,0.180240,0.108386,-0.137950,-0.162212,0.074658,0.191342,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,-0.980785,0.191342,0.906127,-0.544895,-0.693520,0.815493,0.375330,-0.961940,0.923880,-0.180240,-0.853553,0.513280,0.653281,-0.768178,-0.353553,0.906127,-0.831470,0.162212,0.768178,-0.461940,-0.587938,0.691342,0.318190,-0.815493,0.707107,-0.137950,-0.653281,0.392847,0.500000,-0.587938,-0.270598,0.693520,-0.555570,0.108386,0.513280,-0.308658,-0.392847,0.461940,0.212608,-0.544895,0.382683,-0.074658,-0.353553,0.212608,0.270598,-0.318190,-0.146447,0.375330,-0.195090,0.038060,0.180240,-0.108386,-0.137950,0.162212,0.074658,-0.191342,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,-0.980785,0.544895,0.375330,-0.961940,0.693520,0.191342,-0.906127,0.815493,0.923880,-0.513280,-0.353553,0.906127,-0.653281,-0.180240,0.853553,-0.768178,-0.831470,0.461940,0.318190,-0.815493,0.587938,0.162212,-0.768178,0.691342,0.707107,-0.392847,-0.270598,0.693520,-0.500000,-0.137950,0.653281,-0.587938,-0.555570,0.308658,0.212608,-0.544895,0.392847,0.108386,-0.513280,0.461940,0.382683,-0.212608,-0.146447,0.375330,-0.270598,-0.074658,0.353553,-0.318190,-0.195090,0.108386,0.074658,-0.191342,0.137950,0.038060,-0.180240,0.162212,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,-0.980785,0.815493,-0.375330,-0.191342,0.693520,-0.961940,0.906127,-0.544895,0.923880,-0.768178,0.353553,0.180240,-0.653281,0.906127,-0.853553,0.513280,-0.831470,0.691342,-0.318190,-0.162212,0.587938,-0.815493,0.768178,-0.461940,0.707107,-0.587938,0.270598,0.137950,-0.500000,0.693520,-0.653281,0.392847,-0.555570,0.461940,-0.212608,-0.108386,0.392847,-0.544895,0.513280,-0.308658,0.382683,-0.318190,0.146447,0.074658,-0.270598,0.375330,-0.353553,0.212608,-0.195090,0.162212,-0.074658,-0.038060,0.137950,-0.191342,0.180240,-0.108386,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,-0.980785,0.961940,-0.906127,0.815493,-0.693520,0.544895,-0.375330,0.191342,0.923880,-0.906127,0.853553,-0.768178,0.653281,-0.513280,0.353553,-0.180240,-0.831470,0.815493,-0.768178,0.691342,-0.587938,0.461940,-0.318190,0.162212,0.707107,-0.693520,0.653281,-0.587938,0.500000,-0.392847,0.270598,-0.137950,-0.555570,0.544895,-0.513280,0.461940,-0.392847,0.308658,-0.212608,0.108386,0.382683,-0.375330,0.353553,-0.318190,0.270598,-0.212608,0.146447,-0.074658,-0.195090,0.191342,-0.180240,0.162212,-0.137950,0.108386,-0.074658,0.038060,
};

namespace caffe {

template <>
void caffe_gpu_gemm<float>(const CBLAS_TRANSPOSE TransA,
    const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K,
    const float alpha, const float* A, const float* B, const float beta,
    float* C) {
  // Note that cublas follows fortran order.
  int lda = (TransA == CblasNoTrans) ? K : M;
  int ldb = (TransB == CblasNoTrans) ? N : K;
  cublasOperation_t cuTransA =
      (TransA == CblasNoTrans) ? CUBLAS_OP_N : CUBLAS_OP_T;
  cublasOperation_t cuTransB =
      (TransB == CblasNoTrans) ? CUBLAS_OP_N : CUBLAS_OP_T;
  CUBLAS_CHECK(cublasSgemm(Caffe::cublas_handle(), cuTransB, cuTransA,
      N, M, K, &alpha, B, ldb, A, lda, &beta, C, N));
}

template <>
void caffe_gpu_gemm<double>(const CBLAS_TRANSPOSE TransA,
    const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K,
    const double alpha, const double* A, const double* B, const double beta,
    double* C) {
  // Note that cublas follows fortran order.
  int lda = (TransA == CblasNoTrans) ? K : M;
  int ldb = (TransB == CblasNoTrans) ? N : K;
  cublasOperation_t cuTransA =
      (TransA == CblasNoTrans) ? CUBLAS_OP_N : CUBLAS_OP_T;
  cublasOperation_t cuTransB =
      (TransB == CblasNoTrans) ? CUBLAS_OP_N : CUBLAS_OP_T;
  CUBLAS_CHECK(cublasDgemm(Caffe::cublas_handle(), cuTransB, cuTransA,
      N, M, K, &alpha, B, ldb, A, lda, &beta, C, N));
}

template <>
void caffe_gpu_gemv<float>(const CBLAS_TRANSPOSE TransA, const int M,
    const int N, const float alpha, const float* A, const float* x,
    const float beta, float* y) {
  cublasOperation_t cuTransA =
      (TransA == CblasNoTrans) ? CUBLAS_OP_T : CUBLAS_OP_N;
  CUBLAS_CHECK(cublasSgemv(Caffe::cublas_handle(), cuTransA, N, M, &alpha,
      A, N, x, 1, &beta, y, 1));
}

template <>
void caffe_gpu_gemv<double>(const CBLAS_TRANSPOSE TransA, const int M,
    const int N, const double alpha, const double* A, const double* x,
    const double beta, double* y) {
  cublasOperation_t cuTransA =
      (TransA == CblasNoTrans) ? CUBLAS_OP_T : CUBLAS_OP_N;
  CUBLAS_CHECK(cublasDgemv(Caffe::cublas_handle(), cuTransA, N, M, &alpha,
      A, N, x, 1, &beta, y, 1));
}

template <>
void caffe_gpu_axpy<float>(const int N, const float alpha, const float* X,
    float* Y) {
  CUBLAS_CHECK(cublasSaxpy(Caffe::cublas_handle(), N, &alpha, X, 1, Y, 1));
}

template <>
void caffe_gpu_axpy<double>(const int N, const double alpha, const double* X,
    double* Y) {
  CUBLAS_CHECK(cublasDaxpy(Caffe::cublas_handle(), N, &alpha, X, 1, Y, 1));
}

void caffe_gpu_memcpy(const size_t N, const void* X, void* Y) {
  if (X != Y) {
    CUDA_CHECK(cudaMemcpy(Y, X, N, cudaMemcpyDefault));  // NOLINT(caffe/alt_fn)
  }
}

template <>
void caffe_gpu_scal<float>(const int N, const float alpha, float *X) {
  CUBLAS_CHECK(cublasSscal(Caffe::cublas_handle(), N, &alpha, X, 1));
}

template <>
void caffe_gpu_scal<double>(const int N, const double alpha, double *X) {
  CUBLAS_CHECK(cublasDscal(Caffe::cublas_handle(), N, &alpha, X, 1));
}

template <>
void caffe_gpu_axpby<float>(const int N, const float alpha, const float* X,
    const float beta, float* Y) {
  caffe_gpu_scal<float>(N, beta, Y);
  caffe_gpu_axpy<float>(N, alpha, X, Y);
}

template <>
void caffe_gpu_axpby<double>(const int N, const double alpha, const double* X,
    const double beta, double* Y) {
  caffe_gpu_scal<double>(N, beta, Y);
  caffe_gpu_axpy<double>(N, alpha, X, Y);
}

template <>
void caffe_gpu_dot<float>(const int n, const float* x, const float* y,
    float* out) {
  CUBLAS_CHECK(cublasSdot(Caffe::cublas_handle(), n, x, 1, y, 1, out));
}

template <>
void caffe_gpu_dot<double>(const int n, const double* x, const double* y,
    double * out) {
  CUBLAS_CHECK(cublasDdot(Caffe::cublas_handle(), n, x, 1, y, 1, out));
}

template <>
void caffe_gpu_asum<float>(const int n, const float* x, float* y) {
  CUBLAS_CHECK(cublasSasum(Caffe::cublas_handle(), n, x, 1, y));
}

template <>
void caffe_gpu_asum<double>(const int n, const double* x, double* y) {
  CUBLAS_CHECK(cublasDasum(Caffe::cublas_handle(), n, x, 1, y));
}

template <>
void caffe_gpu_scale<float>(const int n, const float alpha, const float *x,
                            float* y) {
  CUBLAS_CHECK(cublasScopy(Caffe::cublas_handle(), n, x, 1, y, 1));
  CUBLAS_CHECK(cublasSscal(Caffe::cublas_handle(), n, &alpha, y, 1));
}

template <>
void caffe_gpu_scale<double>(const int n, const double alpha, const double *x,
                             double* y) {
  CUBLAS_CHECK(cublasDcopy(Caffe::cublas_handle(), n, x, 1, y, 1));
  CUBLAS_CHECK(cublasDscal(Caffe::cublas_handle(), n, &alpha, y, 1));
}

template <typename Dtype>
__global__ void set_kernel(const int n, const Dtype alpha, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = alpha;
  }
}

template <typename Dtype>
void caffe_gpu_set(const int N, const Dtype alpha, Dtype* Y) {
  if (alpha == 0) {
    CUDA_CHECK(cudaMemset(Y, 0, sizeof(Dtype) * N));  // NOLINT(caffe/alt_fn)
    return;
  }
  // NOLINT_NEXT_LINE(whitespace/operators)
  set_kernel<Dtype><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, alpha, Y);
}

template void caffe_gpu_set<int>(const int N, const int alpha, int* Y);
template void caffe_gpu_set<float>(const int N, const float alpha, float* Y);
template void caffe_gpu_set<double>(const int N, const double alpha, double* Y);

template <typename Dtype>
__global__ void add_scalar_kernel(const int n, const Dtype alpha, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] += alpha;
  }
}

template <>
void caffe_gpu_add_scalar(const int N, const float alpha, float* Y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  add_scalar_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, alpha, Y);
}

template <>
void caffe_gpu_add_scalar(const int N, const double alpha, double* Y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  add_scalar_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, alpha, Y);
}

template <typename Dtype>
__global__ void add_kernel(const int n, const Dtype* a,
    const Dtype* b, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = a[index] + b[index];
  }
}

template <>
void caffe_gpu_add<float>(const int N, const float* a, const float* b,
    float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  add_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <>
void caffe_gpu_add<double>(const int N, const double* a, const double* b,
    double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  add_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <typename Dtype>
__global__ void sub_kernel(const int n, const Dtype* a,
    const Dtype* b, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = a[index] - b[index];
  }
}

template <>
void caffe_gpu_sub<float>(const int N, const float* a, const float* b,
    float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  sub_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <>
void caffe_gpu_sub<double>(const int N, const double* a, const double* b,
    double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  sub_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <typename Dtype>
__host__ __device__ void idct2(const Dtype* coeffs, Dtype* pixels, int block_idx)
{
  // make a local copy of the data to avoid waiting from blocking of shared data
  Dtype local_coeffs[64];
  memcpy(local_coeffs, coeffs, 64*sizeof(Dtype));

  const Dtype a0 = (Dtype)(1.0 / (Dtype)sqrt(8.0));
  const Dtype a1 = (Dtype)sqrt((Dtype)(2.0 / 8.0));
  for (int i = 0; i < 64; ++i) {
    pixels[i] = 0.0;
    for (int j = 0; j < 64; ++j) {
      int p = j / 8;
      int q = j % 8;
      Dtype a_p = a1;
      Dtype a_q = a1;
      if (p == 0) {
        a_p = a0;
      }
      if (q == 0) {
        a_q = a0;
      }
      //pixels[i] += (Dtype)(a_p * a_q * local_coeffs[j] * A[64 * i + j]);
      pixels[i] += (Dtype)(a_p * a_q * (stddev[64*block_idx+j] * local_coeffs[j] + mean[64*block_idx+j]) * A[64 * i + j]);
    }
  }
}

template <typename Dtype>
__global__ void idct2_kernel(const int n, const Dtype* c_coeffs0,
    const Dtype* c_coeffs1, Dtype* all_pixels0, Dtype* all_pixels1) {
  CUDA_KERNEL_LOOP(index, n) {
    const int block_size = 64;
    const int example_size = block_size * 3;
    int offset = index*example_size;

    Dtype* curr_example_pixels0 = all_pixels0 + offset;
    Dtype* curr_example_pixels1 = all_pixels1 + offset;
    const Dtype* c_curr_example_coeffs0 = c_coeffs0 + offset;
    const Dtype* c_curr_example_coeffs1 = c_coeffs1 + offset;

    for (int j = 0; j < example_size; j += block_size) {
      // compute the 2d idct for each block
      Dtype* local_pixels0 = curr_example_pixels0 + j;
      Dtype* local_pixels1 = curr_example_pixels1 + j;
      const Dtype* c_local_coeffs0 = c_curr_example_coeffs0 + j;
      const Dtype* c_local_coeffs1 = c_curr_example_coeffs1 + j;
      idct2(c_local_coeffs0, local_pixels0, j / block_size);
      idct2(c_local_coeffs1, local_pixels1, j / block_size);
    }
  }
}
/*
template <typename Dtype>
__global__ void idct2_kernel(const int n, const Dtype* c_coeffs,
    Dtype* all_pixels) {
  //CUDA_KERNEL_LOOP(index, n) {
    idct2(c_coeffs, all_pixels);
  //}
}
*/
template <>
void caffe_gpu_idct2<float>(const int N, const float* c_coeffs0,
    const float* c_coeffs1, float* all_pixels0, float* all_pixels1) {
  idct2_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, c_coeffs0, c_coeffs1, all_pixels0, all_pixels1);
}

template <>
void caffe_gpu_idct2<double>(const int N, const double* c_coeffs0,
    const double* c_coeffs1, double* all_pixels0, double* all_pixels1) {
  idct2_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, c_coeffs0, c_coeffs1, all_pixels0, all_pixels1);
}
/*
template <>
void caffe_gpu_idct2<float>(const int N, const float* c_coeffs,
    float* all_pixels) {
  idct2_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, c_coeffs, all_pixels);
}

template <>
void caffe_gpu_idct2<double>(const int N, const double* c_coeffs,
    double* all_pixels) {
  idct2_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, c_coeffs, all_pixels);
}
*/
template <typename Dtype>
__global__ void didct2_kernel(const int N, Dtype* derivs) {
  Dtype a0 = (Dtype)(sqrt(2.0 / 8.0));
  Dtype a1 = (Dtype)(1.0 / sqrt(8.0));
  for (int m = 0; m < 8; ++m) {
    for (int n = 0; n < 8; ++n) {
      int i = m * 8 + n;
      for (int p = 0; p < 8; ++p) {
        for (int q = 0; q < 8; ++q) {
          int j = p * 8 + q;
          Dtype a_p = a0;
          Dtype a_q = a0;
          if (p == 0) {
            a_p = a1;
          }
          if (q == 0) {
            a_q = a1;
          }
          //derivs[i*64+j] = (Dtype)(a_p * a_q * A[i*64+j]);
          derivs[i*64+j] = (Dtype)(stddev[j] * a_p * a_q * A[i*64+j]);
        }
      }
    }
  }
}

template <>
void caffe_gpu_get_didct2<float>(const int N, float* derivs) {
  didct2_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
    N, derivs);
}

template <>
void caffe_gpu_get_didct2<double>(const int N, double* derivs) {
  didct2_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
    N, derivs);
}

template <typename Dtype>
__global__ void mul_kernel(const int n, const Dtype* a,
    const Dtype* b, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = a[index] * b[index];
  }
}

template <>
void caffe_gpu_mul<float>(const int N, const float* a,
    const float* b, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  mul_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <>
void caffe_gpu_mul<double>(const int N, const double* a,
    const double* b, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  mul_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <typename Dtype>
__global__ void div_kernel(const int n, const Dtype* a,
    const Dtype* b, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = a[index] / b[index];
  }
}

template <>
void caffe_gpu_div<float>(const int N, const float* a,
    const float* b, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  div_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <>
void caffe_gpu_div<double>(const int N, const double* a,
    const double* b, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  div_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <typename Dtype>
__global__ void abs_kernel(const int n, const Dtype* a, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = abs(a[index]);
  }
}

template <>
void caffe_gpu_abs<float>(const int N, const float* a, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  abs_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <>
void caffe_gpu_abs<double>(const int N, const double* a, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  abs_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}


template <typename Dtype>
__global__ void exp_kernel(const int n, const Dtype* a, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = exp(a[index]);
  }
}

template <>
void caffe_gpu_exp<float>(const int N, const float* a, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  exp_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <>
void caffe_gpu_exp<double>(const int N, const double* a, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  exp_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <typename Dtype>
__global__ void log_kernel(const int n, const Dtype* a, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = log(a[index]);
  }
}

template <>
void caffe_gpu_log<float>(const int N, const float* a, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  log_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <>
void caffe_gpu_log<double>(const int N, const double* a, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  log_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <typename Dtype>
__global__ void powx_kernel(const int n, const Dtype* a,
    const Dtype alpha, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = pow(a[index], alpha);
  }
}

template <>
void caffe_gpu_powx<float>(const int N, const float* a,
    const float alpha, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  powx_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, alpha, y);
}

template <>
void caffe_gpu_powx<double>(const int N, const double* a,
    const double alpha, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  powx_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, alpha, y);
}

DEFINE_AND_INSTANTIATE_GPU_UNARY_FUNC(sign, y[index] = (Dtype(0) < x[index])
                                      - (x[index] < Dtype(0)));
DEFINE_AND_INSTANTIATE_GPU_UNARY_FUNC(sgnbit, y[index] = signbit(x[index]));

__global__ void popc_kernel(const int n, const float* a,
    const float* b, uint8_t* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = __popc(static_cast<uint32_t>(a[index]) ^
                      static_cast<uint32_t>(b[index]));
  }
}

__global__ void popcll_kernel(const int n, const double* a,
    const double* b, uint8_t* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = __popcll(static_cast<uint64_t>(a[index]) ^
                      static_cast<uint64_t>(b[index]));
  }
}

template <>
uint32_t caffe_gpu_hamming_distance<float>(const int n, const float* x,
                                  const float* y) {
  // TODO: Fix caffe_gpu_hamming_distance (see failing unit test
  // TestHammingDistanceGPU in test_math_functions.cpp).
  NOT_IMPLEMENTED;
  thrust::device_vector<uint8_t> popcounts(n);
  // NOLINT_NEXT_LINE(whitespace/operators)
  popc_kernel<<<CAFFE_GET_BLOCKS(n), CAFFE_CUDA_NUM_THREADS>>>(
      n, x, y, thrust::raw_pointer_cast(popcounts.data()));
  return thrust::reduce(popcounts.begin(), popcounts.end(),
                        (uint32_t) 0, thrust::plus<uint32_t>());
}

template <>
uint32_t caffe_gpu_hamming_distance<double>(const int n, const double* x,
                                   const double* y) {
  // TODO: Fix caffe_gpu_hamming_distance (see failing unit test
  // TestHammingDistanceGPU in test_math_functions.cpp).
  NOT_IMPLEMENTED;
  thrust::device_vector<uint8_t> popcounts(n);
  // NOLINT_NEXT_LINE(whitespace/operators)
  popcll_kernel<<<CAFFE_GET_BLOCKS(n), CAFFE_CUDA_NUM_THREADS>>>(
      n, x, y, thrust::raw_pointer_cast(popcounts.data()));
  return thrust::reduce(popcounts.begin(), popcounts.end(),
                        /* NOLINT_NEXT_LINE(build/include_what_you_use) */
                        (uint32_t) 0, thrust::plus<uint32_t>());
}

void caffe_gpu_rng_uniform(const int n, unsigned int* r) {
  CURAND_CHECK(curandGenerate(Caffe::curand_generator(), r, n));
}

template <>
void caffe_gpu_rng_uniform<float>(const int n, const float a, const float b,
                                  float* r) {
  CURAND_CHECK(curandGenerateUniform(Caffe::curand_generator(), r, n));
  const float range = b - a;
  if (range != static_cast<float>(1)) {
    caffe_gpu_scal(n, range, r);
  }
  if (a != static_cast<float>(0)) {
    caffe_gpu_add_scalar(n, a, r);
  }
}

template <>
void caffe_gpu_rng_uniform<double>(const int n, const double a, const double b,
                                   double* r) {
  CURAND_CHECK(curandGenerateUniformDouble(Caffe::curand_generator(), r, n));
  const double range = b - a;
  if (range != static_cast<double>(1)) {
    caffe_gpu_scal(n, range, r);
  }
  if (a != static_cast<double>(0)) {
    caffe_gpu_add_scalar(n, a, r);
  }
}

template <>
void caffe_gpu_rng_gaussian(const int n, const float mu, const float sigma,
                            float* r) {
  CURAND_CHECK(
      curandGenerateNormal(Caffe::curand_generator(), r, n, mu, sigma));
}

template <>
void caffe_gpu_rng_gaussian(const int n, const double mu, const double sigma,
                            double* r) {
  CURAND_CHECK(
      curandGenerateNormalDouble(Caffe::curand_generator(), r, n, mu, sigma));
}

}  // namespace caffe
