#include <math_functions.h>  // CUDA's, not caffe's, for fabs, signbit
#include <thrust/device_vector.h>
#include <thrust/functional.h>  // thrust::plus
#include <thrust/reduce.h>

#include <cmath>
#include <cstdlib>
#include <cstring>

#include "caffe/common.hpp"
#include "caffe/util/math_functions.hpp"

__constant__ double stddev[320] = {
  0.426549, 0.078647, 0.045855, 0.032307, 0.024415, 0.018697, 0.014161, 0.010576, 0.079283, 0.042639, 0.031132, 0.023728, 0.018680, 0.014733, 0.011324, 0.008720, 0.046255, 0.031143, 0.024702, 0.019835, 0.015961, 0.012752, 0.009680, 0.007813, 0.032210, 0.023643, 0.019795, 0.016372, 0.013461, 0.011041, 0.008276, 0.006787, 0.024712, 0.018703, 0.015988, 0.013579, 0.011405, 0.009342, 0.007228, 0.005390, 0.018659, 0.014636, 0.012744, 0.010993, 0.009027, 0.007541, 0.005720, 0.004463, 0.014129, 0.011251, 0.010131, 0.008825, 0.007262, 0.006226, 0.004737, 0.003771, 0.010889, 0.008826, 0.008028, 0.006994, 0.005905, 0.004916, 0.003737, 0.003000, 0.426548, 0.079278, 0.046249, 0.032207, 0.024707, 0.018668, 0.014126, 0.010646, 0.078652, 0.042638, 0.031141, 0.023641, 0.018707, 0.014680, 0.011252, 0.008682, 0.045858, 0.031131, 0.024701, 0.019793, 0.015989, 0.012745, 0.009713, 0.007842, 0.032310, 0.023730, 0.019837, 0.016372, 0.013449, 0.011122, 0.008278, 0.006775, 0.024419, 0.018674, 0.015963, 0.013596, 0.011404, 0.009330, 0.007261, 0.005430, 0.018691, 0.014690, 0.012753, 0.010906, 0.009037, 0.007542, 0.005743, 0.004484, 0.014161, 0.011324, 0.010101, 0.008822, 0.007226, 0.006205, 0.004736, 0.003735, 0.010822, 0.008861, 0.007989, 0.006983, 0.005864, 0.004899, 0.003770, 0.003000, 0.425849, 0.078808, 0.045864, 0.032279, 0.024478, 0.018780, 0.014151, 0.010544, 0.078812, 0.042867, 0.031173, 0.023778, 0.018780, 0.014782, 0.011356, 0.008787, 0.045867, 0.031176, 0.024700, 0.019876, 0.015991, 0.012815, 0.009770, 0.007863, 0.032281, 0.023777, 0.019877, 0.016511, 0.013513, 0.011118, 0.008286, 0.006817, 0.024482, 0.018773, 0.015993, 0.013644, 0.011380, 0.009331, 0.007242, 0.005418, 0.018773, 0.014736, 0.012814, 0.010987, 0.009017, 0.007547, 0.005753, 0.004477, 0.014152, 0.011357, 0.010189, 0.008841, 0.007242, 0.006239, 0.004750, 0.003741, 0.010789, 0.008927, 0.008046, 0.007030, 0.005886, 0.004916, 0.003741, 0.003004, 0.425149, 0.078617, 0.045981, 0.032147, 0.024721, 0.018651, 0.014164, 0.010696, 0.078921, 0.042845, 0.031306, 0.023852, 0.018877, 0.014820, 0.011373, 0.008779, 0.045961, 0.031323, 0.024828, 0.019925, 0.016114, 0.012876, 0.009821, 0.007925, 0.032442, 0.023851, 0.019947, 0.016468, 0.013557, 0.011222, 0.008356, 0.006849, 0.024512, 0.018802, 0.016065, 0.013682, 0.011469, 0.009404, 0.007329, 0.005477, 0.018762, 0.014796, 0.012837, 0.010980, 0.009099, 0.007593, 0.005792, 0.004522, 0.014226, 0.011394, 0.010173, 0.008892, 0.007288, 0.006256, 0.004775, 0.003765, 0.010863, 0.008914, 0.008048, 0.007038, 0.005914, 0.004939, 0.003801, 0.003023, 0.425152, 0.078916, 0.045959, 0.032440, 0.024508, 0.018768, 0.014226, 0.010614, 0.078623, 0.042847, 0.031323, 0.023849, 0.018808, 0.014840, 0.011393, 0.008769, 0.045988, 0.031308, 0.024829, 0.019946, 0.016064, 0.012836, 0.009748, 0.007862, 0.032151, 0.023854, 0.019927, 0.016468, 0.013547, 0.011112, 0.008338, 0.006834, 0.024727, 0.018874, 0.016114, 0.013687, 0.011469, 0.009406, 0.007289, 0.005437, 0.018644, 0.014776, 0.012875, 0.011092, 0.009101, 0.007593, 0.005766, 0.004499, 0.014166, 0.011371, 0.010241, 0.008906, 0.007329, 0.006279, 0.004776, 0.003802, 0.010939, 0.008920, 0.008102, 0.007060, 0.005957, 0.004959, 0.003766, 0.003023, 
};

__constant__ double mean[320] = {
  -0.140877, 0.000477, -0.000060, -0.000103, -0.000013, -0.000007, 0.000033, 0.000057, -0.000516, 0.000030, -0.000065, -0.000081, 0.000063, -0.000006, 0.000002, 0.000006, -0.000386, -0.000031, -0.000069, -0.000013, 0.000041, 0.000012, 0.000033, 0.000012, -0.000122, -0.000010, -0.000015, -0.000015, 0.000011, -0.000016, -0.000013, -0.000005, -0.000060, -0.000001, 0.000006, 0.000014, 0.000004, 0.000009, 0.000028, 0.000030, 0.000001, -0.000019, 0.000014, 0.000017, -0.000002, 0.000007, -0.000004, 0.000002, -0.000023, -0.000008, 0.000006, -0.000004, 0.000015, -0.000004, 0.000005, 0.000004, -0.000007, -0.000006, 0.000007, -0.000008, 0.000012, 0.000015, 0.000004, 0.000004, -0.140878, -0.000506, -0.000376, -0.000112, -0.000061, 0.000011, -0.000010, 0.000003, 0.000466, 0.000030, -0.000030, -0.000010, -0.000012, -0.000021, -0.000009, -0.000005, -0.000069, -0.000065, -0.000069, -0.000015, -0.000005, 0.000014, 0.000006, 0.000007, -0.000113, -0.000082, -0.000013, -0.000015, 0.000001, 0.000014, -0.000001, -0.000008, -0.000013, 0.000075, 0.000052, 0.000021, 0.000005, 0.000010, 0.000028, 0.000024, -0.000014, -0.000006, 0.000011, -0.000015, -0.000006, 0.000007, -0.000004, 0.000013, 0.000021, 0.000002, 0.000037, -0.000015, 0.000016, -0.000004, 0.000007, 0.000006, 0.000048, 0.000007, 0.000014, -0.000007, 0.000023, 0.000002, 0.000003, 0.000004, -0.141050, 0.000442, -0.000108, -0.000028, -0.000066, 0.000056, 0.000046, 0.000050, 0.000431, -0.000025, -0.000001, 0.000057, -0.000050, -0.000022, 0.000002, -0.000029, -0.000119, -0.000001, -0.000120, -0.000004, 0.000013, -0.000019, 0.000020, 0.000012, -0.000040, 0.000056, -0.000004, 0.000034, 0.000026, -0.000005, -0.000008, 0.000013, -0.000066, -0.000039, 0.000024, 0.000041, 0.000042, 0.000011, 0.000026, 0.000012, 0.000045, -0.000020, -0.000019, -0.000008, -0.000002, 0.000008, 0.000006, -0.000003, 0.000032, 0.000003, 0.000021, -0.000009, 0.000012, 0.000006, 0.000008, -0.000002, 0.000041, -0.000029, 0.000009, 0.000012, -0.000002, -0.000003, -0.000002, 0.000008, -0.141900, 0.000256, -0.000108, 0.000018, 0.000001, 0.000066, -0.000009, 0.000003, 0.000429, 0.000039, -0.000009, 0.000002, -0.000018, -0.000020, -0.000005, -0.000005, -0.000031, -0.000071, -0.000060, -0.000004, 0.000003, 0.000015, 0.000003, 0.000005, -0.000118, -0.000086, -0.000022, -0.000014, 0.000002, 0.000007, -0.000001, -0.000009, -0.000007, 0.000066, 0.000063, 0.000019, -0.000003, 0.000011, 0.000033, 0.000024, -0.000008, -0.000001, 0.000016, -0.000018, -0.000006, 0.000005, -0.000005, 0.000013, 0.000034, 0.000006, 0.000038, -0.000015, 0.000013, -0.000005, 0.000006, 0.000005, 0.000050, 0.000009, 0.000007, -0.000003, 0.000027, 0.000002, 0.000002, 0.000003, -0.141899, 0.000441, -0.000021, -0.000107, -0.000007, -0.000001, 0.000045, 0.000059, 0.000246, 0.000039, -0.000070, -0.000085, 0.000053, -0.000001, 0.000006, 0.000008, -0.000119, -0.000010, -0.000059, -0.000021, 0.000052, 0.000016, 0.000034, 0.000006, 0.000008, 0.000002, -0.000004, -0.000014, 0.000009, -0.000019, -0.000012, -0.000001, 0.000002, -0.000008, 0.000014, 0.000015, -0.000004, 0.000010, 0.000025, 0.000033, 0.000056, -0.000018, 0.000015, 0.000009, -0.000000, 0.000005, -0.000005, 0.000002, -0.000021, -0.000005, 0.000004, -0.000002, 0.000020, -0.000005, 0.000005, 0.000003, -0.000006, -0.000005, 0.000005, -0.000009, 0.000012, 0.000015, 0.000004, 0.000003, 
};

__constant__ double A[64*64] = {
1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,0.980785,0.961940,0.906127,0.815493,0.693520,0.544895,0.375330,0.191342,0.923880,0.906127,0.853553,0.768178,0.653281,0.513280,0.353553,0.180240,0.831470,0.815493,0.768178,0.691342,0.587938,0.461940,0.318190,0.162212,0.707107,0.693520,0.653281,0.587938,0.500000,0.392847,0.270598,0.137950,0.555570,0.544895,0.513280,0.461940,0.392847,0.308658,0.212608,0.108386,0.382683,0.375330,0.353553,0.318190,0.270598,0.212608,0.146447,0.074658,0.195090,0.191342,0.180240,0.162212,0.137950,0.108386,0.074658,0.038060,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,0.980785,0.815493,0.375330,-0.191342,-0.693520,-0.961940,-0.906127,-0.544895,0.923880,0.768178,0.353553,-0.180240,-0.653281,-0.906127,-0.853553,-0.513280,0.831470,0.691342,0.318190,-0.162212,-0.587938,-0.815493,-0.768178,-0.461940,0.707107,0.587938,0.270598,-0.137950,-0.500000,-0.693520,-0.653281,-0.392847,0.555570,0.461940,0.212608,-0.108386,-0.392847,-0.544895,-0.513280,-0.308658,0.382683,0.318190,0.146447,-0.074658,-0.270598,-0.375330,-0.353553,-0.212608,0.195090,0.162212,0.074658,-0.038060,-0.137950,-0.191342,-0.180240,-0.108386,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,0.980785,0.544895,-0.375330,-0.961940,-0.693520,0.191342,0.906127,0.815493,0.923880,0.513280,-0.353553,-0.906127,-0.653281,0.180240,0.853553,0.768178,0.831470,0.461940,-0.318190,-0.815493,-0.587938,0.162212,0.768178,0.691342,0.707107,0.392847,-0.270598,-0.693520,-0.500000,0.137950,0.653281,0.587938,0.555570,0.308658,-0.212608,-0.544895,-0.392847,0.108386,0.513280,0.461940,0.382683,0.212608,-0.146447,-0.375330,-0.270598,0.074658,0.353553,0.318190,0.195090,0.108386,-0.074658,-0.191342,-0.137950,0.038060,0.180240,0.162212,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,0.980785,0.191342,-0.906127,-0.544895,0.693520,0.815493,-0.375330,-0.961940,0.923880,0.180240,-0.853553,-0.513280,0.653281,0.768178,-0.353553,-0.906127,0.831470,0.162212,-0.768178,-0.461940,0.587938,0.691342,-0.318190,-0.815493,0.707107,0.137950,-0.653281,-0.392847,0.500000,0.587938,-0.270598,-0.693520,0.555570,0.108386,-0.513280,-0.308658,0.392847,0.461940,-0.212608,-0.544895,0.382683,0.074658,-0.353553,-0.212608,0.270598,0.318190,-0.146447,-0.375330,0.195090,0.038060,-0.180240,-0.108386,0.137950,0.162212,-0.074658,-0.191342,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,0.980785,-0.191342,-0.906127,0.544895,0.693520,-0.815493,-0.375330,0.961940,0.923880,-0.180240,-0.853553,0.513280,0.653281,-0.768178,-0.353553,0.906127,0.831470,-0.162212,-0.768178,0.461940,0.587938,-0.691342,-0.318190,0.815493,0.707107,-0.137950,-0.653281,0.392847,0.500000,-0.587938,-0.270598,0.693520,0.555570,-0.108386,-0.513280,0.308658,0.392847,-0.461940,-0.212608,0.544895,0.382683,-0.074658,-0.353553,0.212608,0.270598,-0.318190,-0.146447,0.375330,0.195090,-0.038060,-0.180240,0.108386,0.137950,-0.162212,-0.074658,0.191342,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,0.980785,-0.544895,-0.375330,0.961940,-0.693520,-0.191342,0.906127,-0.815493,0.923880,-0.513280,-0.353553,0.906127,-0.653281,-0.180240,0.853553,-0.768178,0.831470,-0.461940,-0.318190,0.815493,-0.587938,-0.162212,0.768178,-0.691342,0.707107,-0.392847,-0.270598,0.693520,-0.500000,-0.137950,0.653281,-0.587938,0.555570,-0.308658,-0.212608,0.544895,-0.392847,-0.108386,0.513280,-0.461940,0.382683,-0.212608,-0.146447,0.375330,-0.270598,-0.074658,0.353553,-0.318190,0.195090,-0.108386,-0.074658,0.191342,-0.137950,-0.038060,0.180240,-0.162212,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,0.980785,-0.815493,0.375330,0.191342,-0.693520,0.961940,-0.906127,0.544895,0.923880,-0.768178,0.353553,0.180240,-0.653281,0.906127,-0.853553,0.513280,0.831470,-0.691342,0.318190,0.162212,-0.587938,0.815493,-0.768178,0.461940,0.707107,-0.587938,0.270598,0.137950,-0.500000,0.693520,-0.653281,0.392847,0.555570,-0.461940,0.212608,0.108386,-0.392847,0.544895,-0.513280,0.308658,0.382683,-0.318190,0.146447,0.074658,-0.270598,0.375330,-0.353553,0.212608,0.195090,-0.162212,0.074658,0.038060,-0.137950,0.191342,-0.180240,0.108386,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,0.980785,-0.961940,0.906127,-0.815493,0.693520,-0.544895,0.375330,-0.191342,0.923880,-0.906127,0.853553,-0.768178,0.653281,-0.513280,0.353553,-0.180240,0.831470,-0.815493,0.768178,-0.691342,0.587938,-0.461940,0.318190,-0.162212,0.707107,-0.693520,0.653281,-0.587938,0.500000,-0.392847,0.270598,-0.137950,0.555570,-0.544895,0.513280,-0.461940,0.392847,-0.308658,0.212608,-0.108386,0.382683,-0.375330,0.353553,-0.318190,0.270598,-0.212608,0.146447,-0.074658,0.195090,-0.191342,0.180240,-0.162212,0.137950,-0.108386,0.074658,-0.038060,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,0.831470,0.815493,0.768178,0.691342,0.587938,0.461940,0.318190,0.162212,0.382683,0.375330,0.353553,0.318190,0.270598,0.212608,0.146447,0.074658,-0.195090,-0.191342,-0.180240,-0.162212,-0.137950,-0.108386,-0.074658,-0.038060,-0.707107,-0.693520,-0.653281,-0.587938,-0.500000,-0.392847,-0.270598,-0.137950,-0.980785,-0.961940,-0.906127,-0.815493,-0.693520,-0.544895,-0.375330,-0.191342,-0.923880,-0.906127,-0.853553,-0.768178,-0.653281,-0.513280,-0.353553,-0.180240,-0.555570,-0.544895,-0.513280,-0.461940,-0.392847,-0.308658,-0.212608,-0.108386,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,0.831470,0.691342,0.318190,-0.162212,-0.587938,-0.815493,-0.768178,-0.461940,0.382683,0.318190,0.146447,-0.074658,-0.270598,-0.375330,-0.353553,-0.212608,-0.195090,-0.162212,-0.074658,0.038060,0.137950,0.191342,0.180240,0.108386,-0.707107,-0.587938,-0.270598,0.137950,0.500000,0.693520,0.653281,0.392847,-0.980785,-0.815493,-0.375330,0.191342,0.693520,0.961940,0.906127,0.544895,-0.923880,-0.768178,-0.353553,0.180240,0.653281,0.906127,0.853553,0.513280,-0.555570,-0.461940,-0.212608,0.108386,0.392847,0.544895,0.513280,0.308658,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,0.831470,0.461940,-0.318190,-0.815493,-0.587938,0.162212,0.768178,0.691342,0.382683,0.212608,-0.146447,-0.375330,-0.270598,0.074658,0.353553,0.318190,-0.195090,-0.108386,0.074658,0.191342,0.137950,-0.038060,-0.180240,-0.162212,-0.707107,-0.392847,0.270598,0.693520,0.500000,-0.137950,-0.653281,-0.587938,-0.980785,-0.544895,0.375330,0.961940,0.693520,-0.191342,-0.906127,-0.815493,-0.923880,-0.513280,0.353553,0.906127,0.653281,-0.180240,-0.853553,-0.768178,-0.555570,-0.308658,0.212608,0.544895,0.392847,-0.108386,-0.513280,-0.461940,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,0.831470,0.162212,-0.768178,-0.461940,0.587938,0.691342,-0.318190,-0.815493,0.382683,0.074658,-0.353553,-0.212608,0.270598,0.318190,-0.146447,-0.375330,-0.195090,-0.038060,0.180240,0.108386,-0.137950,-0.162212,0.074658,0.191342,-0.707107,-0.137950,0.653281,0.392847,-0.500000,-0.587938,0.270598,0.693520,-0.980785,-0.191342,0.906127,0.544895,-0.693520,-0.815493,0.375330,0.961940,-0.923880,-0.180240,0.853553,0.513280,-0.653281,-0.768178,0.353553,0.906127,-0.555570,-0.108386,0.513280,0.308658,-0.392847,-0.461940,0.212608,0.544895,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,0.831470,-0.162212,-0.768178,0.461940,0.587938,-0.691342,-0.318190,0.815493,0.382683,-0.074658,-0.353553,0.212608,0.270598,-0.318190,-0.146447,0.375330,-0.195090,0.038060,0.180240,-0.108386,-0.137950,0.162212,0.074658,-0.191342,-0.707107,0.137950,0.653281,-0.392847,-0.500000,0.587938,0.270598,-0.693520,-0.980785,0.191342,0.906127,-0.544895,-0.693520,0.815493,0.375330,-0.961940,-0.923880,0.180240,0.853553,-0.513280,-0.653281,0.768178,0.353553,-0.906127,-0.555570,0.108386,0.513280,-0.308658,-0.392847,0.461940,0.212608,-0.544895,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,0.831470,-0.461940,-0.318190,0.815493,-0.587938,-0.162212,0.768178,-0.691342,0.382683,-0.212608,-0.146447,0.375330,-0.270598,-0.074658,0.353553,-0.318190,-0.195090,0.108386,0.074658,-0.191342,0.137950,0.038060,-0.180240,0.162212,-0.707107,0.392847,0.270598,-0.693520,0.500000,0.137950,-0.653281,0.587938,-0.980785,0.544895,0.375330,-0.961940,0.693520,0.191342,-0.906127,0.815493,-0.923880,0.513280,0.353553,-0.906127,0.653281,0.180240,-0.853553,0.768178,-0.555570,0.308658,0.212608,-0.544895,0.392847,0.108386,-0.513280,0.461940,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,0.831470,-0.691342,0.318190,0.162212,-0.587938,0.815493,-0.768178,0.461940,0.382683,-0.318190,0.146447,0.074658,-0.270598,0.375330,-0.353553,0.212608,-0.195090,0.162212,-0.074658,-0.038060,0.137950,-0.191342,0.180240,-0.108386,-0.707107,0.587938,-0.270598,-0.137950,0.500000,-0.693520,0.653281,-0.392847,-0.980785,0.815493,-0.375330,-0.191342,0.693520,-0.961940,0.906127,-0.544895,-0.923880,0.768178,-0.353553,-0.180240,0.653281,-0.906127,0.853553,-0.513280,-0.555570,0.461940,-0.212608,-0.108386,0.392847,-0.544895,0.513280,-0.308658,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,0.831470,-0.815493,0.768178,-0.691342,0.587938,-0.461940,0.318190,-0.162212,0.382683,-0.375330,0.353553,-0.318190,0.270598,-0.212608,0.146447,-0.074658,-0.195090,0.191342,-0.180240,0.162212,-0.137950,0.108386,-0.074658,0.038060,-0.707107,0.693520,-0.653281,0.587938,-0.500000,0.392847,-0.270598,0.137950,-0.980785,0.961940,-0.906127,0.815493,-0.693520,0.544895,-0.375330,0.191342,-0.923880,0.906127,-0.853553,0.768178,-0.653281,0.513280,-0.353553,0.180240,-0.555570,0.544895,-0.513280,0.461940,-0.392847,0.308658,-0.212608,0.108386,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,0.555570,0.544895,0.513280,0.461940,0.392847,0.308658,0.212608,0.108386,-0.382683,-0.375330,-0.353553,-0.318190,-0.270598,-0.212608,-0.146447,-0.074658,-0.980785,-0.961940,-0.906127,-0.815493,-0.693520,-0.544895,-0.375330,-0.191342,-0.707107,-0.693520,-0.653281,-0.587938,-0.500000,-0.392847,-0.270598,-0.137950,0.195090,0.191342,0.180240,0.162212,0.137950,0.108386,0.074658,0.038060,0.923880,0.906127,0.853553,0.768178,0.653281,0.513280,0.353553,0.180240,0.831470,0.815493,0.768178,0.691342,0.587938,0.461940,0.318190,0.162212,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,0.555570,0.461940,0.212608,-0.108386,-0.392847,-0.544895,-0.513280,-0.308658,-0.382683,-0.318190,-0.146447,0.074658,0.270598,0.375330,0.353553,0.212608,-0.980785,-0.815493,-0.375330,0.191342,0.693520,0.961940,0.906127,0.544895,-0.707107,-0.587938,-0.270598,0.137950,0.500000,0.693520,0.653281,0.392847,0.195090,0.162212,0.074658,-0.038060,-0.137950,-0.191342,-0.180240,-0.108386,0.923880,0.768178,0.353553,-0.180240,-0.653281,-0.906127,-0.853553,-0.513280,0.831470,0.691342,0.318190,-0.162212,-0.587938,-0.815493,-0.768178,-0.461940,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,0.555570,0.308658,-0.212608,-0.544895,-0.392847,0.108386,0.513280,0.461940,-0.382683,-0.212608,0.146447,0.375330,0.270598,-0.074658,-0.353553,-0.318190,-0.980785,-0.544895,0.375330,0.961940,0.693520,-0.191342,-0.906127,-0.815493,-0.707107,-0.392847,0.270598,0.693520,0.500000,-0.137950,-0.653281,-0.587938,0.195090,0.108386,-0.074658,-0.191342,-0.137950,0.038060,0.180240,0.162212,0.923880,0.513280,-0.353553,-0.906127,-0.653281,0.180240,0.853553,0.768178,0.831470,0.461940,-0.318190,-0.815493,-0.587938,0.162212,0.768178,0.691342,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,0.555570,0.108386,-0.513280,-0.308658,0.392847,0.461940,-0.212608,-0.544895,-0.382683,-0.074658,0.353553,0.212608,-0.270598,-0.318190,0.146447,0.375330,-0.980785,-0.191342,0.906127,0.544895,-0.693520,-0.815493,0.375330,0.961940,-0.707107,-0.137950,0.653281,0.392847,-0.500000,-0.587938,0.270598,0.693520,0.195090,0.038060,-0.180240,-0.108386,0.137950,0.162212,-0.074658,-0.191342,0.923880,0.180240,-0.853553,-0.513280,0.653281,0.768178,-0.353553,-0.906127,0.831470,0.162212,-0.768178,-0.461940,0.587938,0.691342,-0.318190,-0.815493,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,0.555570,-0.108386,-0.513280,0.308658,0.392847,-0.461940,-0.212608,0.544895,-0.382683,0.074658,0.353553,-0.212608,-0.270598,0.318190,0.146447,-0.375330,-0.980785,0.191342,0.906127,-0.544895,-0.693520,0.815493,0.375330,-0.961940,-0.707107,0.137950,0.653281,-0.392847,-0.500000,0.587938,0.270598,-0.693520,0.195090,-0.038060,-0.180240,0.108386,0.137950,-0.162212,-0.074658,0.191342,0.923880,-0.180240,-0.853553,0.513280,0.653281,-0.768178,-0.353553,0.906127,0.831470,-0.162212,-0.768178,0.461940,0.587938,-0.691342,-0.318190,0.815493,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,0.555570,-0.308658,-0.212608,0.544895,-0.392847,-0.108386,0.513280,-0.461940,-0.382683,0.212608,0.146447,-0.375330,0.270598,0.074658,-0.353553,0.318190,-0.980785,0.544895,0.375330,-0.961940,0.693520,0.191342,-0.906127,0.815493,-0.707107,0.392847,0.270598,-0.693520,0.500000,0.137950,-0.653281,0.587938,0.195090,-0.108386,-0.074658,0.191342,-0.137950,-0.038060,0.180240,-0.162212,0.923880,-0.513280,-0.353553,0.906127,-0.653281,-0.180240,0.853553,-0.768178,0.831470,-0.461940,-0.318190,0.815493,-0.587938,-0.162212,0.768178,-0.691342,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,0.555570,-0.461940,0.212608,0.108386,-0.392847,0.544895,-0.513280,0.308658,-0.382683,0.318190,-0.146447,-0.074658,0.270598,-0.375330,0.353553,-0.212608,-0.980785,0.815493,-0.375330,-0.191342,0.693520,-0.961940,0.906127,-0.544895,-0.707107,0.587938,-0.270598,-0.137950,0.500000,-0.693520,0.653281,-0.392847,0.195090,-0.162212,0.074658,0.038060,-0.137950,0.191342,-0.180240,0.108386,0.923880,-0.768178,0.353553,0.180240,-0.653281,0.906127,-0.853553,0.513280,0.831470,-0.691342,0.318190,0.162212,-0.587938,0.815493,-0.768178,0.461940,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,0.555570,-0.544895,0.513280,-0.461940,0.392847,-0.308658,0.212608,-0.108386,-0.382683,0.375330,-0.353553,0.318190,-0.270598,0.212608,-0.146447,0.074658,-0.980785,0.961940,-0.906127,0.815493,-0.693520,0.544895,-0.375330,0.191342,-0.707107,0.693520,-0.653281,0.587938,-0.500000,0.392847,-0.270598,0.137950,0.195090,-0.191342,0.180240,-0.162212,0.137950,-0.108386,0.074658,-0.038060,0.923880,-0.906127,0.853553,-0.768178,0.653281,-0.513280,0.353553,-0.180240,0.831470,-0.815493,0.768178,-0.691342,0.587938,-0.461940,0.318190,-0.162212,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,0.195090,0.191342,0.180240,0.162212,0.137950,0.108386,0.074658,0.038060,-0.923880,-0.906127,-0.853553,-0.768178,-0.653281,-0.513280,-0.353553,-0.180240,-0.555570,-0.544895,-0.513280,-0.461940,-0.392847,-0.308658,-0.212608,-0.108386,0.707107,0.693520,0.653281,0.587938,0.500000,0.392847,0.270598,0.137950,0.831470,0.815493,0.768178,0.691342,0.587938,0.461940,0.318190,0.162212,-0.382683,-0.375330,-0.353553,-0.318190,-0.270598,-0.212608,-0.146447,-0.074658,-0.980785,-0.961940,-0.906127,-0.815493,-0.693520,-0.544895,-0.375330,-0.191342,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,0.195090,0.162212,0.074658,-0.038060,-0.137950,-0.191342,-0.180240,-0.108386,-0.923880,-0.768178,-0.353553,0.180240,0.653281,0.906127,0.853553,0.513280,-0.555570,-0.461940,-0.212608,0.108386,0.392847,0.544895,0.513280,0.308658,0.707107,0.587938,0.270598,-0.137950,-0.500000,-0.693520,-0.653281,-0.392847,0.831470,0.691342,0.318190,-0.162212,-0.587938,-0.815493,-0.768178,-0.461940,-0.382683,-0.318190,-0.146447,0.074658,0.270598,0.375330,0.353553,0.212608,-0.980785,-0.815493,-0.375330,0.191342,0.693520,0.961940,0.906127,0.544895,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,0.195090,0.108386,-0.074658,-0.191342,-0.137950,0.038060,0.180240,0.162212,-0.923880,-0.513280,0.353553,0.906127,0.653281,-0.180240,-0.853553,-0.768178,-0.555570,-0.308658,0.212608,0.544895,0.392847,-0.108386,-0.513280,-0.461940,0.707107,0.392847,-0.270598,-0.693520,-0.500000,0.137950,0.653281,0.587938,0.831470,0.461940,-0.318190,-0.815493,-0.587938,0.162212,0.768178,0.691342,-0.382683,-0.212608,0.146447,0.375330,0.270598,-0.074658,-0.353553,-0.318190,-0.980785,-0.544895,0.375330,0.961940,0.693520,-0.191342,-0.906127,-0.815493,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,0.195090,0.038060,-0.180240,-0.108386,0.137950,0.162212,-0.074658,-0.191342,-0.923880,-0.180240,0.853553,0.513280,-0.653281,-0.768178,0.353553,0.906127,-0.555570,-0.108386,0.513280,0.308658,-0.392847,-0.461940,0.212608,0.544895,0.707107,0.137950,-0.653281,-0.392847,0.500000,0.587938,-0.270598,-0.693520,0.831470,0.162212,-0.768178,-0.461940,0.587938,0.691342,-0.318190,-0.815493,-0.382683,-0.074658,0.353553,0.212608,-0.270598,-0.318190,0.146447,0.375330,-0.980785,-0.191342,0.906127,0.544895,-0.693520,-0.815493,0.375330,0.961940,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,0.195090,-0.038060,-0.180240,0.108386,0.137950,-0.162212,-0.074658,0.191342,-0.923880,0.180240,0.853553,-0.513280,-0.653281,0.768178,0.353553,-0.906127,-0.555570,0.108386,0.513280,-0.308658,-0.392847,0.461940,0.212608,-0.544895,0.707107,-0.137950,-0.653281,0.392847,0.500000,-0.587938,-0.270598,0.693520,0.831470,-0.162212,-0.768178,0.461940,0.587938,-0.691342,-0.318190,0.815493,-0.382683,0.074658,0.353553,-0.212608,-0.270598,0.318190,0.146447,-0.375330,-0.980785,0.191342,0.906127,-0.544895,-0.693520,0.815493,0.375330,-0.961940,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,0.195090,-0.108386,-0.074658,0.191342,-0.137950,-0.038060,0.180240,-0.162212,-0.923880,0.513280,0.353553,-0.906127,0.653281,0.180240,-0.853553,0.768178,-0.555570,0.308658,0.212608,-0.544895,0.392847,0.108386,-0.513280,0.461940,0.707107,-0.392847,-0.270598,0.693520,-0.500000,-0.137950,0.653281,-0.587938,0.831470,-0.461940,-0.318190,0.815493,-0.587938,-0.162212,0.768178,-0.691342,-0.382683,0.212608,0.146447,-0.375330,0.270598,0.074658,-0.353553,0.318190,-0.980785,0.544895,0.375330,-0.961940,0.693520,0.191342,-0.906127,0.815493,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,0.195090,-0.162212,0.074658,0.038060,-0.137950,0.191342,-0.180240,0.108386,-0.923880,0.768178,-0.353553,-0.180240,0.653281,-0.906127,0.853553,-0.513280,-0.555570,0.461940,-0.212608,-0.108386,0.392847,-0.544895,0.513280,-0.308658,0.707107,-0.587938,0.270598,0.137950,-0.500000,0.693520,-0.653281,0.392847,0.831470,-0.691342,0.318190,0.162212,-0.587938,0.815493,-0.768178,0.461940,-0.382683,0.318190,-0.146447,-0.074658,0.270598,-0.375330,0.353553,-0.212608,-0.980785,0.815493,-0.375330,-0.191342,0.693520,-0.961940,0.906127,-0.544895,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,0.195090,-0.191342,0.180240,-0.162212,0.137950,-0.108386,0.074658,-0.038060,-0.923880,0.906127,-0.853553,0.768178,-0.653281,0.513280,-0.353553,0.180240,-0.555570,0.544895,-0.513280,0.461940,-0.392847,0.308658,-0.212608,0.108386,0.707107,-0.693520,0.653281,-0.587938,0.500000,-0.392847,0.270598,-0.137950,0.831470,-0.815493,0.768178,-0.691342,0.587938,-0.461940,0.318190,-0.162212,-0.382683,0.375330,-0.353553,0.318190,-0.270598,0.212608,-0.146447,0.074658,-0.980785,0.961940,-0.906127,0.815493,-0.693520,0.544895,-0.375330,0.191342,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,-0.195090,-0.191342,-0.180240,-0.162212,-0.137950,-0.108386,-0.074658,-0.038060,-0.923880,-0.906127,-0.853553,-0.768178,-0.653281,-0.513280,-0.353553,-0.180240,0.555570,0.544895,0.513280,0.461940,0.392847,0.308658,0.212608,0.108386,0.707107,0.693520,0.653281,0.587938,0.500000,0.392847,0.270598,0.137950,-0.831470,-0.815493,-0.768178,-0.691342,-0.587938,-0.461940,-0.318190,-0.162212,-0.382683,-0.375330,-0.353553,-0.318190,-0.270598,-0.212608,-0.146447,-0.074658,0.980785,0.961940,0.906127,0.815493,0.693520,0.544895,0.375330,0.191342,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,-0.195090,-0.162212,-0.074658,0.038060,0.137950,0.191342,0.180240,0.108386,-0.923880,-0.768178,-0.353553,0.180240,0.653281,0.906127,0.853553,0.513280,0.555570,0.461940,0.212608,-0.108386,-0.392847,-0.544895,-0.513280,-0.308658,0.707107,0.587938,0.270598,-0.137950,-0.500000,-0.693520,-0.653281,-0.392847,-0.831470,-0.691342,-0.318190,0.162212,0.587938,0.815493,0.768178,0.461940,-0.382683,-0.318190,-0.146447,0.074658,0.270598,0.375330,0.353553,0.212608,0.980785,0.815493,0.375330,-0.191342,-0.693520,-0.961940,-0.906127,-0.544895,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,-0.195090,-0.108386,0.074658,0.191342,0.137950,-0.038060,-0.180240,-0.162212,-0.923880,-0.513280,0.353553,0.906127,0.653281,-0.180240,-0.853553,-0.768178,0.555570,0.308658,-0.212608,-0.544895,-0.392847,0.108386,0.513280,0.461940,0.707107,0.392847,-0.270598,-0.693520,-0.500000,0.137950,0.653281,0.587938,-0.831470,-0.461940,0.318190,0.815493,0.587938,-0.162212,-0.768178,-0.691342,-0.382683,-0.212608,0.146447,0.375330,0.270598,-0.074658,-0.353553,-0.318190,0.980785,0.544895,-0.375330,-0.961940,-0.693520,0.191342,0.906127,0.815493,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,-0.195090,-0.038060,0.180240,0.108386,-0.137950,-0.162212,0.074658,0.191342,-0.923880,-0.180240,0.853553,0.513280,-0.653281,-0.768178,0.353553,0.906127,0.555570,0.108386,-0.513280,-0.308658,0.392847,0.461940,-0.212608,-0.544895,0.707107,0.137950,-0.653281,-0.392847,0.500000,0.587938,-0.270598,-0.693520,-0.831470,-0.162212,0.768178,0.461940,-0.587938,-0.691342,0.318190,0.815493,-0.382683,-0.074658,0.353553,0.212608,-0.270598,-0.318190,0.146447,0.375330,0.980785,0.191342,-0.906127,-0.544895,0.693520,0.815493,-0.375330,-0.961940,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,-0.195090,0.038060,0.180240,-0.108386,-0.137950,0.162212,0.074658,-0.191342,-0.923880,0.180240,0.853553,-0.513280,-0.653281,0.768178,0.353553,-0.906127,0.555570,-0.108386,-0.513280,0.308658,0.392847,-0.461940,-0.212608,0.544895,0.707107,-0.137950,-0.653281,0.392847,0.500000,-0.587938,-0.270598,0.693520,-0.831470,0.162212,0.768178,-0.461940,-0.587938,0.691342,0.318190,-0.815493,-0.382683,0.074658,0.353553,-0.212608,-0.270598,0.318190,0.146447,-0.375330,0.980785,-0.191342,-0.906127,0.544895,0.693520,-0.815493,-0.375330,0.961940,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,-0.195090,0.108386,0.074658,-0.191342,0.137950,0.038060,-0.180240,0.162212,-0.923880,0.513280,0.353553,-0.906127,0.653281,0.180240,-0.853553,0.768178,0.555570,-0.308658,-0.212608,0.544895,-0.392847,-0.108386,0.513280,-0.461940,0.707107,-0.392847,-0.270598,0.693520,-0.500000,-0.137950,0.653281,-0.587938,-0.831470,0.461940,0.318190,-0.815493,0.587938,0.162212,-0.768178,0.691342,-0.382683,0.212608,0.146447,-0.375330,0.270598,0.074658,-0.353553,0.318190,0.980785,-0.544895,-0.375330,0.961940,-0.693520,-0.191342,0.906127,-0.815493,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,-0.195090,0.162212,-0.074658,-0.038060,0.137950,-0.191342,0.180240,-0.108386,-0.923880,0.768178,-0.353553,-0.180240,0.653281,-0.906127,0.853553,-0.513280,0.555570,-0.461940,0.212608,0.108386,-0.392847,0.544895,-0.513280,0.308658,0.707107,-0.587938,0.270598,0.137950,-0.500000,0.693520,-0.653281,0.392847,-0.831470,0.691342,-0.318190,-0.162212,0.587938,-0.815493,0.768178,-0.461940,-0.382683,0.318190,-0.146447,-0.074658,0.270598,-0.375330,0.353553,-0.212608,0.980785,-0.815493,0.375330,0.191342,-0.693520,0.961940,-0.906127,0.544895,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,-0.195090,0.191342,-0.180240,0.162212,-0.137950,0.108386,-0.074658,0.038060,-0.923880,0.906127,-0.853553,0.768178,-0.653281,0.513280,-0.353553,0.180240,0.555570,-0.544895,0.513280,-0.461940,0.392847,-0.308658,0.212608,-0.108386,0.707107,-0.693520,0.653281,-0.587938,0.500000,-0.392847,0.270598,-0.137950,-0.831470,0.815493,-0.768178,0.691342,-0.587938,0.461940,-0.318190,0.162212,-0.382683,0.375330,-0.353553,0.318190,-0.270598,0.212608,-0.146447,0.074658,0.980785,-0.961940,0.906127,-0.815493,0.693520,-0.544895,0.375330,-0.191342,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,-0.555570,-0.544895,-0.513280,-0.461940,-0.392847,-0.308658,-0.212608,-0.108386,-0.382683,-0.375330,-0.353553,-0.318190,-0.270598,-0.212608,-0.146447,-0.074658,0.980785,0.961940,0.906127,0.815493,0.693520,0.544895,0.375330,0.191342,-0.707107,-0.693520,-0.653281,-0.587938,-0.500000,-0.392847,-0.270598,-0.137950,-0.195090,-0.191342,-0.180240,-0.162212,-0.137950,-0.108386,-0.074658,-0.038060,0.923880,0.906127,0.853553,0.768178,0.653281,0.513280,0.353553,0.180240,-0.831470,-0.815493,-0.768178,-0.691342,-0.587938,-0.461940,-0.318190,-0.162212,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,-0.555570,-0.461940,-0.212608,0.108386,0.392847,0.544895,0.513280,0.308658,-0.382683,-0.318190,-0.146447,0.074658,0.270598,0.375330,0.353553,0.212608,0.980785,0.815493,0.375330,-0.191342,-0.693520,-0.961940,-0.906127,-0.544895,-0.707107,-0.587938,-0.270598,0.137950,0.500000,0.693520,0.653281,0.392847,-0.195090,-0.162212,-0.074658,0.038060,0.137950,0.191342,0.180240,0.108386,0.923880,0.768178,0.353553,-0.180240,-0.653281,-0.906127,-0.853553,-0.513280,-0.831470,-0.691342,-0.318190,0.162212,0.587938,0.815493,0.768178,0.461940,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,-0.555570,-0.308658,0.212608,0.544895,0.392847,-0.108386,-0.513280,-0.461940,-0.382683,-0.212608,0.146447,0.375330,0.270598,-0.074658,-0.353553,-0.318190,0.980785,0.544895,-0.375330,-0.961940,-0.693520,0.191342,0.906127,0.815493,-0.707107,-0.392847,0.270598,0.693520,0.500000,-0.137950,-0.653281,-0.587938,-0.195090,-0.108386,0.074658,0.191342,0.137950,-0.038060,-0.180240,-0.162212,0.923880,0.513280,-0.353553,-0.906127,-0.653281,0.180240,0.853553,0.768178,-0.831470,-0.461940,0.318190,0.815493,0.587938,-0.162212,-0.768178,-0.691342,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,-0.555570,-0.108386,0.513280,0.308658,-0.392847,-0.461940,0.212608,0.544895,-0.382683,-0.074658,0.353553,0.212608,-0.270598,-0.318190,0.146447,0.375330,0.980785,0.191342,-0.906127,-0.544895,0.693520,0.815493,-0.375330,-0.961940,-0.707107,-0.137950,0.653281,0.392847,-0.500000,-0.587938,0.270598,0.693520,-0.195090,-0.038060,0.180240,0.108386,-0.137950,-0.162212,0.074658,0.191342,0.923880,0.180240,-0.853553,-0.513280,0.653281,0.768178,-0.353553,-0.906127,-0.831470,-0.162212,0.768178,0.461940,-0.587938,-0.691342,0.318190,0.815493,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,-0.555570,0.108386,0.513280,-0.308658,-0.392847,0.461940,0.212608,-0.544895,-0.382683,0.074658,0.353553,-0.212608,-0.270598,0.318190,0.146447,-0.375330,0.980785,-0.191342,-0.906127,0.544895,0.693520,-0.815493,-0.375330,0.961940,-0.707107,0.137950,0.653281,-0.392847,-0.500000,0.587938,0.270598,-0.693520,-0.195090,0.038060,0.180240,-0.108386,-0.137950,0.162212,0.074658,-0.191342,0.923880,-0.180240,-0.853553,0.513280,0.653281,-0.768178,-0.353553,0.906127,-0.831470,0.162212,0.768178,-0.461940,-0.587938,0.691342,0.318190,-0.815493,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,-0.555570,0.308658,0.212608,-0.544895,0.392847,0.108386,-0.513280,0.461940,-0.382683,0.212608,0.146447,-0.375330,0.270598,0.074658,-0.353553,0.318190,0.980785,-0.544895,-0.375330,0.961940,-0.693520,-0.191342,0.906127,-0.815493,-0.707107,0.392847,0.270598,-0.693520,0.500000,0.137950,-0.653281,0.587938,-0.195090,0.108386,0.074658,-0.191342,0.137950,0.038060,-0.180240,0.162212,0.923880,-0.513280,-0.353553,0.906127,-0.653281,-0.180240,0.853553,-0.768178,-0.831470,0.461940,0.318190,-0.815493,0.587938,0.162212,-0.768178,0.691342,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,-0.555570,0.461940,-0.212608,-0.108386,0.392847,-0.544895,0.513280,-0.308658,-0.382683,0.318190,-0.146447,-0.074658,0.270598,-0.375330,0.353553,-0.212608,0.980785,-0.815493,0.375330,0.191342,-0.693520,0.961940,-0.906127,0.544895,-0.707107,0.587938,-0.270598,-0.137950,0.500000,-0.693520,0.653281,-0.392847,-0.195090,0.162212,-0.074658,-0.038060,0.137950,-0.191342,0.180240,-0.108386,0.923880,-0.768178,0.353553,0.180240,-0.653281,0.906127,-0.853553,0.513280,-0.831470,0.691342,-0.318190,-0.162212,0.587938,-0.815493,0.768178,-0.461940,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,-0.555570,0.544895,-0.513280,0.461940,-0.392847,0.308658,-0.212608,0.108386,-0.382683,0.375330,-0.353553,0.318190,-0.270598,0.212608,-0.146447,0.074658,0.980785,-0.961940,0.906127,-0.815493,0.693520,-0.544895,0.375330,-0.191342,-0.707107,0.693520,-0.653281,0.587938,-0.500000,0.392847,-0.270598,0.137950,-0.195090,0.191342,-0.180240,0.162212,-0.137950,0.108386,-0.074658,0.038060,0.923880,-0.906127,0.853553,-0.768178,0.653281,-0.513280,0.353553,-0.180240,-0.831470,0.815493,-0.768178,0.691342,-0.587938,0.461940,-0.318190,0.162212,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,-0.831470,-0.815493,-0.768178,-0.691342,-0.587938,-0.461940,-0.318190,-0.162212,0.382683,0.375330,0.353553,0.318190,0.270598,0.212608,0.146447,0.074658,0.195090,0.191342,0.180240,0.162212,0.137950,0.108386,0.074658,0.038060,-0.707107,-0.693520,-0.653281,-0.587938,-0.500000,-0.392847,-0.270598,-0.137950,0.980785,0.961940,0.906127,0.815493,0.693520,0.544895,0.375330,0.191342,-0.923880,-0.906127,-0.853553,-0.768178,-0.653281,-0.513280,-0.353553,-0.180240,0.555570,0.544895,0.513280,0.461940,0.392847,0.308658,0.212608,0.108386,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,-0.831470,-0.691342,-0.318190,0.162212,0.587938,0.815493,0.768178,0.461940,0.382683,0.318190,0.146447,-0.074658,-0.270598,-0.375330,-0.353553,-0.212608,0.195090,0.162212,0.074658,-0.038060,-0.137950,-0.191342,-0.180240,-0.108386,-0.707107,-0.587938,-0.270598,0.137950,0.500000,0.693520,0.653281,0.392847,0.980785,0.815493,0.375330,-0.191342,-0.693520,-0.961940,-0.906127,-0.544895,-0.923880,-0.768178,-0.353553,0.180240,0.653281,0.906127,0.853553,0.513280,0.555570,0.461940,0.212608,-0.108386,-0.392847,-0.544895,-0.513280,-0.308658,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,-0.831470,-0.461940,0.318190,0.815493,0.587938,-0.162212,-0.768178,-0.691342,0.382683,0.212608,-0.146447,-0.375330,-0.270598,0.074658,0.353553,0.318190,0.195090,0.108386,-0.074658,-0.191342,-0.137950,0.038060,0.180240,0.162212,-0.707107,-0.392847,0.270598,0.693520,0.500000,-0.137950,-0.653281,-0.587938,0.980785,0.544895,-0.375330,-0.961940,-0.693520,0.191342,0.906127,0.815493,-0.923880,-0.513280,0.353553,0.906127,0.653281,-0.180240,-0.853553,-0.768178,0.555570,0.308658,-0.212608,-0.544895,-0.392847,0.108386,0.513280,0.461940,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,-0.831470,-0.162212,0.768178,0.461940,-0.587938,-0.691342,0.318190,0.815493,0.382683,0.074658,-0.353553,-0.212608,0.270598,0.318190,-0.146447,-0.375330,0.195090,0.038060,-0.180240,-0.108386,0.137950,0.162212,-0.074658,-0.191342,-0.707107,-0.137950,0.653281,0.392847,-0.500000,-0.587938,0.270598,0.693520,0.980785,0.191342,-0.906127,-0.544895,0.693520,0.815493,-0.375330,-0.961940,-0.923880,-0.180240,0.853553,0.513280,-0.653281,-0.768178,0.353553,0.906127,0.555570,0.108386,-0.513280,-0.308658,0.392847,0.461940,-0.212608,-0.544895,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,-0.831470,0.162212,0.768178,-0.461940,-0.587938,0.691342,0.318190,-0.815493,0.382683,-0.074658,-0.353553,0.212608,0.270598,-0.318190,-0.146447,0.375330,0.195090,-0.038060,-0.180240,0.108386,0.137950,-0.162212,-0.074658,0.191342,-0.707107,0.137950,0.653281,-0.392847,-0.500000,0.587938,0.270598,-0.693520,0.980785,-0.191342,-0.906127,0.544895,0.693520,-0.815493,-0.375330,0.961940,-0.923880,0.180240,0.853553,-0.513280,-0.653281,0.768178,0.353553,-0.906127,0.555570,-0.108386,-0.513280,0.308658,0.392847,-0.461940,-0.212608,0.544895,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,-0.831470,0.461940,0.318190,-0.815493,0.587938,0.162212,-0.768178,0.691342,0.382683,-0.212608,-0.146447,0.375330,-0.270598,-0.074658,0.353553,-0.318190,0.195090,-0.108386,-0.074658,0.191342,-0.137950,-0.038060,0.180240,-0.162212,-0.707107,0.392847,0.270598,-0.693520,0.500000,0.137950,-0.653281,0.587938,0.980785,-0.544895,-0.375330,0.961940,-0.693520,-0.191342,0.906127,-0.815493,-0.923880,0.513280,0.353553,-0.906127,0.653281,0.180240,-0.853553,0.768178,0.555570,-0.308658,-0.212608,0.544895,-0.392847,-0.108386,0.513280,-0.461940,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,-0.831470,0.691342,-0.318190,-0.162212,0.587938,-0.815493,0.768178,-0.461940,0.382683,-0.318190,0.146447,0.074658,-0.270598,0.375330,-0.353553,0.212608,0.195090,-0.162212,0.074658,0.038060,-0.137950,0.191342,-0.180240,0.108386,-0.707107,0.587938,-0.270598,-0.137950,0.500000,-0.693520,0.653281,-0.392847,0.980785,-0.815493,0.375330,0.191342,-0.693520,0.961940,-0.906127,0.544895,-0.923880,0.768178,-0.353553,-0.180240,0.653281,-0.906127,0.853553,-0.513280,0.555570,-0.461940,0.212608,0.108386,-0.392847,0.544895,-0.513280,0.308658,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,-0.831470,0.815493,-0.768178,0.691342,-0.587938,0.461940,-0.318190,0.162212,0.382683,-0.375330,0.353553,-0.318190,0.270598,-0.212608,0.146447,-0.074658,0.195090,-0.191342,0.180240,-0.162212,0.137950,-0.108386,0.074658,-0.038060,-0.707107,0.693520,-0.653281,0.587938,-0.500000,0.392847,-0.270598,0.137950,0.980785,-0.961940,0.906127,-0.815493,0.693520,-0.544895,0.375330,-0.191342,-0.923880,0.906127,-0.853553,0.768178,-0.653281,0.513280,-0.353553,0.180240,0.555570,-0.544895,0.513280,-0.461940,0.392847,-0.308658,0.212608,-0.108386,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,-0.980785,-0.961940,-0.906127,-0.815493,-0.693520,-0.544895,-0.375330,-0.191342,0.923880,0.906127,0.853553,0.768178,0.653281,0.513280,0.353553,0.180240,-0.831470,-0.815493,-0.768178,-0.691342,-0.587938,-0.461940,-0.318190,-0.162212,0.707107,0.693520,0.653281,0.587938,0.500000,0.392847,0.270598,0.137950,-0.555570,-0.544895,-0.513280,-0.461940,-0.392847,-0.308658,-0.212608,-0.108386,0.382683,0.375330,0.353553,0.318190,0.270598,0.212608,0.146447,0.074658,-0.195090,-0.191342,-0.180240,-0.162212,-0.137950,-0.108386,-0.074658,-0.038060,1.000000,0.831470,0.382683,-0.195090,-0.707107,-0.980785,-0.923880,-0.555570,-0.980785,-0.815493,-0.375330,0.191342,0.693520,0.961940,0.906127,0.544895,0.923880,0.768178,0.353553,-0.180240,-0.653281,-0.906127,-0.853553,-0.513280,-0.831470,-0.691342,-0.318190,0.162212,0.587938,0.815493,0.768178,0.461940,0.707107,0.587938,0.270598,-0.137950,-0.500000,-0.693520,-0.653281,-0.392847,-0.555570,-0.461940,-0.212608,0.108386,0.392847,0.544895,0.513280,0.308658,0.382683,0.318190,0.146447,-0.074658,-0.270598,-0.375330,-0.353553,-0.212608,-0.195090,-0.162212,-0.074658,0.038060,0.137950,0.191342,0.180240,0.108386,1.000000,0.555570,-0.382683,-0.980785,-0.707107,0.195090,0.923880,0.831470,-0.980785,-0.544895,0.375330,0.961940,0.693520,-0.191342,-0.906127,-0.815493,0.923880,0.513280,-0.353553,-0.906127,-0.653281,0.180240,0.853553,0.768178,-0.831470,-0.461940,0.318190,0.815493,0.587938,-0.162212,-0.768178,-0.691342,0.707107,0.392847,-0.270598,-0.693520,-0.500000,0.137950,0.653281,0.587938,-0.555570,-0.308658,0.212608,0.544895,0.392847,-0.108386,-0.513280,-0.461940,0.382683,0.212608,-0.146447,-0.375330,-0.270598,0.074658,0.353553,0.318190,-0.195090,-0.108386,0.074658,0.191342,0.137950,-0.038060,-0.180240,-0.162212,1.000000,0.195090,-0.923880,-0.555570,0.707107,0.831470,-0.382683,-0.980785,-0.980785,-0.191342,0.906127,0.544895,-0.693520,-0.815493,0.375330,0.961940,0.923880,0.180240,-0.853553,-0.513280,0.653281,0.768178,-0.353553,-0.906127,-0.831470,-0.162212,0.768178,0.461940,-0.587938,-0.691342,0.318190,0.815493,0.707107,0.137950,-0.653281,-0.392847,0.500000,0.587938,-0.270598,-0.693520,-0.555570,-0.108386,0.513280,0.308658,-0.392847,-0.461940,0.212608,0.544895,0.382683,0.074658,-0.353553,-0.212608,0.270598,0.318190,-0.146447,-0.375330,-0.195090,-0.038060,0.180240,0.108386,-0.137950,-0.162212,0.074658,0.191342,1.000000,-0.195090,-0.923880,0.555570,0.707107,-0.831470,-0.382683,0.980785,-0.980785,0.191342,0.906127,-0.544895,-0.693520,0.815493,0.375330,-0.961940,0.923880,-0.180240,-0.853553,0.513280,0.653281,-0.768178,-0.353553,0.906127,-0.831470,0.162212,0.768178,-0.461940,-0.587938,0.691342,0.318190,-0.815493,0.707107,-0.137950,-0.653281,0.392847,0.500000,-0.587938,-0.270598,0.693520,-0.555570,0.108386,0.513280,-0.308658,-0.392847,0.461940,0.212608,-0.544895,0.382683,-0.074658,-0.353553,0.212608,0.270598,-0.318190,-0.146447,0.375330,-0.195090,0.038060,0.180240,-0.108386,-0.137950,0.162212,0.074658,-0.191342,1.000000,-0.555570,-0.382683,0.980785,-0.707107,-0.195090,0.923880,-0.831470,-0.980785,0.544895,0.375330,-0.961940,0.693520,0.191342,-0.906127,0.815493,0.923880,-0.513280,-0.353553,0.906127,-0.653281,-0.180240,0.853553,-0.768178,-0.831470,0.461940,0.318190,-0.815493,0.587938,0.162212,-0.768178,0.691342,0.707107,-0.392847,-0.270598,0.693520,-0.500000,-0.137950,0.653281,-0.587938,-0.555570,0.308658,0.212608,-0.544895,0.392847,0.108386,-0.513280,0.461940,0.382683,-0.212608,-0.146447,0.375330,-0.270598,-0.074658,0.353553,-0.318190,-0.195090,0.108386,0.074658,-0.191342,0.137950,0.038060,-0.180240,0.162212,1.000000,-0.831470,0.382683,0.195090,-0.707107,0.980785,-0.923880,0.555570,-0.980785,0.815493,-0.375330,-0.191342,0.693520,-0.961940,0.906127,-0.544895,0.923880,-0.768178,0.353553,0.180240,-0.653281,0.906127,-0.853553,0.513280,-0.831470,0.691342,-0.318190,-0.162212,0.587938,-0.815493,0.768178,-0.461940,0.707107,-0.587938,0.270598,0.137950,-0.500000,0.693520,-0.653281,0.392847,-0.555570,0.461940,-0.212608,-0.108386,0.392847,-0.544895,0.513280,-0.308658,0.382683,-0.318190,0.146447,0.074658,-0.270598,0.375330,-0.353553,0.212608,-0.195090,0.162212,-0.074658,-0.038060,0.137950,-0.191342,0.180240,-0.108386,1.000000,-0.980785,0.923880,-0.831470,0.707107,-0.555570,0.382683,-0.195090,-0.980785,0.961940,-0.906127,0.815493,-0.693520,0.544895,-0.375330,0.191342,0.923880,-0.906127,0.853553,-0.768178,0.653281,-0.513280,0.353553,-0.180240,-0.831470,0.815493,-0.768178,0.691342,-0.587938,0.461940,-0.318190,0.162212,0.707107,-0.693520,0.653281,-0.587938,0.500000,-0.392847,0.270598,-0.137950,-0.555570,0.544895,-0.513280,0.461940,-0.392847,0.308658,-0.212608,0.108386,0.382683,-0.375330,0.353553,-0.318190,0.270598,-0.212608,0.146447,-0.074658,-0.195090,0.191342,-0.180240,0.162212,-0.137950,0.108386,-0.074658,0.038060,
};

namespace caffe {

template <>
void caffe_gpu_gemm<float>(const CBLAS_TRANSPOSE TransA,
    const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K,
    const float alpha, const float* A, const float* B, const float beta,
    float* C) {
  // Note that cublas follows fortran order.
  int lda = (TransA == CblasNoTrans) ? K : M;
  int ldb = (TransB == CblasNoTrans) ? N : K;
  cublasOperation_t cuTransA =
      (TransA == CblasNoTrans) ? CUBLAS_OP_N : CUBLAS_OP_T;
  cublasOperation_t cuTransB =
      (TransB == CblasNoTrans) ? CUBLAS_OP_N : CUBLAS_OP_T;
  CUBLAS_CHECK(cublasSgemm(Caffe::cublas_handle(), cuTransB, cuTransA,
      N, M, K, &alpha, B, ldb, A, lda, &beta, C, N));
}

template <>
void caffe_gpu_gemm<double>(const CBLAS_TRANSPOSE TransA,
    const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K,
    const double alpha, const double* A, const double* B, const double beta,
    double* C) {
  // Note that cublas follows fortran order.
  int lda = (TransA == CblasNoTrans) ? K : M;
  int ldb = (TransB == CblasNoTrans) ? N : K;
  cublasOperation_t cuTransA =
      (TransA == CblasNoTrans) ? CUBLAS_OP_N : CUBLAS_OP_T;
  cublasOperation_t cuTransB =
      (TransB == CblasNoTrans) ? CUBLAS_OP_N : CUBLAS_OP_T;
  CUBLAS_CHECK(cublasDgemm(Caffe::cublas_handle(), cuTransB, cuTransA,
      N, M, K, &alpha, B, ldb, A, lda, &beta, C, N));
}

template <>
void caffe_gpu_gemv<float>(const CBLAS_TRANSPOSE TransA, const int M,
    const int N, const float alpha, const float* A, const float* x,
    const float beta, float* y) {
  cublasOperation_t cuTransA =
      (TransA == CblasNoTrans) ? CUBLAS_OP_T : CUBLAS_OP_N;
  CUBLAS_CHECK(cublasSgemv(Caffe::cublas_handle(), cuTransA, N, M, &alpha,
      A, N, x, 1, &beta, y, 1));
}

template <>
void caffe_gpu_gemv<double>(const CBLAS_TRANSPOSE TransA, const int M,
    const int N, const double alpha, const double* A, const double* x,
    const double beta, double* y) {
  cublasOperation_t cuTransA =
      (TransA == CblasNoTrans) ? CUBLAS_OP_T : CUBLAS_OP_N;
  CUBLAS_CHECK(cublasDgemv(Caffe::cublas_handle(), cuTransA, N, M, &alpha,
      A, N, x, 1, &beta, y, 1));
}

template <>
void caffe_gpu_axpy<float>(const int N, const float alpha, const float* X,
    float* Y) {
  CUBLAS_CHECK(cublasSaxpy(Caffe::cublas_handle(), N, &alpha, X, 1, Y, 1));
}

template <>
void caffe_gpu_axpy<double>(const int N, const double alpha, const double* X,
    double* Y) {
  CUBLAS_CHECK(cublasDaxpy(Caffe::cublas_handle(), N, &alpha, X, 1, Y, 1));
}

void caffe_gpu_memcpy(const size_t N, const void* X, void* Y) {
  if (X != Y) {
    CUDA_CHECK(cudaMemcpy(Y, X, N, cudaMemcpyDefault));  // NOLINT(caffe/alt_fn)
  }
}

template <>
void caffe_gpu_scal<float>(const int N, const float alpha, float *X) {
  CUBLAS_CHECK(cublasSscal(Caffe::cublas_handle(), N, &alpha, X, 1));
}

template <>
void caffe_gpu_scal<double>(const int N, const double alpha, double *X) {
  CUBLAS_CHECK(cublasDscal(Caffe::cublas_handle(), N, &alpha, X, 1));
}

template <>
void caffe_gpu_axpby<float>(const int N, const float alpha, const float* X,
    const float beta, float* Y) {
  caffe_gpu_scal<float>(N, beta, Y);
  caffe_gpu_axpy<float>(N, alpha, X, Y);
}

template <>
void caffe_gpu_axpby<double>(const int N, const double alpha, const double* X,
    const double beta, double* Y) {
  caffe_gpu_scal<double>(N, beta, Y);
  caffe_gpu_axpy<double>(N, alpha, X, Y);
}

template <>
void caffe_gpu_dot<float>(const int n, const float* x, const float* y,
    float* out) {
  CUBLAS_CHECK(cublasSdot(Caffe::cublas_handle(), n, x, 1, y, 1, out));
}

template <>
void caffe_gpu_dot<double>(const int n, const double* x, const double* y,
    double * out) {
  CUBLAS_CHECK(cublasDdot(Caffe::cublas_handle(), n, x, 1, y, 1, out));
}

template <>
void caffe_gpu_asum<float>(const int n, const float* x, float* y) {
  CUBLAS_CHECK(cublasSasum(Caffe::cublas_handle(), n, x, 1, y));
}

template <>
void caffe_gpu_asum<double>(const int n, const double* x, double* y) {
  CUBLAS_CHECK(cublasDasum(Caffe::cublas_handle(), n, x, 1, y));
}

template <>
void caffe_gpu_scale<float>(const int n, const float alpha, const float *x,
                            float* y) {
  CUBLAS_CHECK(cublasScopy(Caffe::cublas_handle(), n, x, 1, y, 1));
  CUBLAS_CHECK(cublasSscal(Caffe::cublas_handle(), n, &alpha, y, 1));
}

template <>
void caffe_gpu_scale<double>(const int n, const double alpha, const double *x,
                             double* y) {
  CUBLAS_CHECK(cublasDcopy(Caffe::cublas_handle(), n, x, 1, y, 1));
  CUBLAS_CHECK(cublasDscal(Caffe::cublas_handle(), n, &alpha, y, 1));
}

template <typename Dtype>
__global__ void set_kernel(const int n, const Dtype alpha, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = alpha;
  }
}

template <typename Dtype>
void caffe_gpu_set(const int N, const Dtype alpha, Dtype* Y) {
  if (alpha == 0) {
    CUDA_CHECK(cudaMemset(Y, 0, sizeof(Dtype) * N));  // NOLINT(caffe/alt_fn)
    return;
  }
  // NOLINT_NEXT_LINE(whitespace/operators)
  set_kernel<Dtype><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, alpha, Y);
}

template void caffe_gpu_set<int>(const int N, const int alpha, int* Y);
template void caffe_gpu_set<float>(const int N, const float alpha, float* Y);
template void caffe_gpu_set<double>(const int N, const double alpha, double* Y);

template <typename Dtype>
__global__ void add_scalar_kernel(const int n, const Dtype alpha, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] += alpha;
  }
}

template <>
void caffe_gpu_add_scalar(const int N, const float alpha, float* Y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  add_scalar_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, alpha, Y);
}

template <>
void caffe_gpu_add_scalar(const int N, const double alpha, double* Y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  add_scalar_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, alpha, Y);
}

template <typename Dtype>
__global__ void add_kernel(const int n, const Dtype* a,
    const Dtype* b, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = a[index] + b[index];
  }
}

template <>
void caffe_gpu_add<float>(const int N, const float* a, const float* b,
    float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  add_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <>
void caffe_gpu_add<double>(const int N, const double* a, const double* b,
    double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  add_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <typename Dtype>
__global__ void sub_kernel(const int n, const Dtype* a,
    const Dtype* b, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = a[index] - b[index];
  }
}

template <>
void caffe_gpu_sub<float>(const int N, const float* a, const float* b,
    float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  sub_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <>
void caffe_gpu_sub<double>(const int N, const double* a, const double* b,
    double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  sub_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <typename Dtype>
__host__ __device__ void idct2(const Dtype* coeffs, Dtype* pixels, int block_idx)
{
  // make a local copy of the data to avoid waiting from blocking of shared data
  Dtype local_coeffs[64];
  memcpy(local_coeffs, coeffs, 64*sizeof(Dtype));

  const Dtype a0 = (Dtype)(1.0 / (Dtype)sqrt(8.0));
  const Dtype a1 = (Dtype)sqrt((Dtype)(2.0 / 8.0));
  for (int i = 0; i < 64; ++i) {
    pixels[i] = 0.0;
    for (int j = 0; j < 64; ++j) {
      int p = j / 8;
      int q = j % 8;
      Dtype a_p = a1;
      Dtype a_q = a1;
      if (p == 0) {
        a_p = a0;
      }
      if (q == 0) {
        a_q = a0;
      }
      //pixels[i] += (Dtype)(a_p * a_q * local_coeffs[j] * A[64 * i + j]);
      pixels[i] += (Dtype)(a_p * a_q * (stddev[64*block_idx+j] * local_coeffs[j] + mean[64*block_idx+j]) * A[64 * i + j]);
    }
  }
}

template <typename Dtype>
__global__ void idct2_kernel(const int n, const Dtype* c_coeffs0,
    const Dtype* c_coeffs1, Dtype* all_pixels0, Dtype* all_pixels1) {
  CUDA_KERNEL_LOOP(index, n) {
    const int num_blocks = 9;
    const int block_size = 64;
    const int example_size = block_size * num_blocks;
    int offset = index*example_size;

    Dtype* curr_example_pixels0 = all_pixels0 + offset;
    Dtype* curr_example_pixels1 = all_pixels1 + offset;
    const Dtype* c_curr_example_coeffs0 = c_coeffs0 + offset;
    const Dtype* c_curr_example_coeffs1 = c_coeffs1 + offset;

    for (int j = 0; j < example_size; j += block_size) {
      // compute the 2d idct for each block
      Dtype* local_pixels0 = curr_example_pixels0 + j;
      Dtype* local_pixels1 = curr_example_pixels1 + j;
      const Dtype* c_local_coeffs0 = c_curr_example_coeffs0 + j;
      const Dtype* c_local_coeffs1 = c_curr_example_coeffs1 + j;
      idct2(c_local_coeffs0, local_pixels0, j / block_size);
      idct2(c_local_coeffs1, local_pixels1, j / block_size);
    }
  }
}
/*
template <typename Dtype>
__global__ void idct2_kernel(const int n, const Dtype* c_coeffs,
    Dtype* all_pixels) {
  //CUDA_KERNEL_LOOP(index, n) {
    idct2(c_coeffs, all_pixels);
  //}
}
*/
template <>
void caffe_gpu_idct2<float>(const int N, const float* c_coeffs0,
    const float* c_coeffs1, float* all_pixels0, float* all_pixels1) {
  idct2_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, c_coeffs0, c_coeffs1, all_pixels0, all_pixels1);
}

template <>
void caffe_gpu_idct2<double>(const int N, const double* c_coeffs0,
    const double* c_coeffs1, double* all_pixels0, double* all_pixels1) {
  idct2_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, c_coeffs0, c_coeffs1, all_pixels0, all_pixels1);
}
/*
template <>
void caffe_gpu_idct2<float>(const int N, const float* c_coeffs,
    float* all_pixels) {
  idct2_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, c_coeffs, all_pixels);
}

template <>
void caffe_gpu_idct2<double>(const int N, const double* c_coeffs,
    double* all_pixels) {
  idct2_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, c_coeffs, all_pixels);
}
*/
template <typename Dtype>
__global__ void didct2_kernel(const int N, Dtype* derivs) {
  Dtype a0 = (Dtype)(sqrt(2.0 / 8.0));
  Dtype a1 = (Dtype)(1.0 / sqrt(8.0));
  for (int m = 0; m < 8; ++m) {
    for (int n = 0; n < 8; ++n) {
      int i = m * 8 + n;
      for (int p = 0; p < 8; ++p) {
        for (int q = 0; q < 8; ++q) {
          int j = p * 8 + q;
          Dtype a_p = a0;
          Dtype a_q = a0;
          if (p == 0) {
            a_p = a1;
          }
          if (q == 0) {
            a_q = a1;
          }
          //derivs[i*64+j] = (Dtype)(a_p * a_q * A[i*64+j]);
          derivs[i*64+j] = (Dtype)(stddev[j] * a_p * a_q * A[i*64+j]);
        }
      }
    }
  }
}

template <>
void caffe_gpu_get_didct2<float>(const int N, float* derivs) {
  didct2_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
    N, derivs);
}

template <>
void caffe_gpu_get_didct2<double>(const int N, double* derivs) {
  didct2_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
    N, derivs);
}

template <typename Dtype>
__global__ void mul_kernel(const int n, const Dtype* a,
    const Dtype* b, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = a[index] * b[index];
  }
}

template <>
void caffe_gpu_mul<float>(const int N, const float* a,
    const float* b, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  mul_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <>
void caffe_gpu_mul<double>(const int N, const double* a,
    const double* b, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  mul_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <typename Dtype>
__global__ void div_kernel(const int n, const Dtype* a,
    const Dtype* b, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = a[index] / b[index];
  }
}

template <>
void caffe_gpu_div<float>(const int N, const float* a,
    const float* b, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  div_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <>
void caffe_gpu_div<double>(const int N, const double* a,
    const double* b, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  div_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, b, y);
}

template <typename Dtype>
__global__ void abs_kernel(const int n, const Dtype* a, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = abs(a[index]);
  }
}

template <>
void caffe_gpu_abs<float>(const int N, const float* a, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  abs_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <>
void caffe_gpu_abs<double>(const int N, const double* a, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  abs_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}


template <typename Dtype>
__global__ void exp_kernel(const int n, const Dtype* a, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = exp(a[index]);
  }
}

template <>
void caffe_gpu_exp<float>(const int N, const float* a, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  exp_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <>
void caffe_gpu_exp<double>(const int N, const double* a, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  exp_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <typename Dtype>
__global__ void log_kernel(const int n, const Dtype* a, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = log(a[index]);
  }
}

template <>
void caffe_gpu_log<float>(const int N, const float* a, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  log_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <>
void caffe_gpu_log<double>(const int N, const double* a, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  log_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, y);
}

template <typename Dtype>
__global__ void powx_kernel(const int n, const Dtype* a,
    const Dtype alpha, Dtype* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = pow(a[index], alpha);
  }
}

template <>
void caffe_gpu_powx<float>(const int N, const float* a,
    const float alpha, float* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  powx_kernel<float><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, alpha, y);
}

template <>
void caffe_gpu_powx<double>(const int N, const double* a,
    const double alpha, double* y) {
  // NOLINT_NEXT_LINE(whitespace/operators)
  powx_kernel<double><<<CAFFE_GET_BLOCKS(N), CAFFE_CUDA_NUM_THREADS>>>(
      N, a, alpha, y);
}

DEFINE_AND_INSTANTIATE_GPU_UNARY_FUNC(sign, y[index] = (Dtype(0) < x[index])
                                      - (x[index] < Dtype(0)));
DEFINE_AND_INSTANTIATE_GPU_UNARY_FUNC(sgnbit, y[index] = signbit(x[index]));

__global__ void popc_kernel(const int n, const float* a,
    const float* b, uint8_t* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = __popc(static_cast<uint32_t>(a[index]) ^
                      static_cast<uint32_t>(b[index]));
  }
}

__global__ void popcll_kernel(const int n, const double* a,
    const double* b, uint8_t* y) {
  CUDA_KERNEL_LOOP(index, n) {
    y[index] = __popcll(static_cast<uint64_t>(a[index]) ^
                      static_cast<uint64_t>(b[index]));
  }
}

template <>
uint32_t caffe_gpu_hamming_distance<float>(const int n, const float* x,
                                  const float* y) {
  // TODO: Fix caffe_gpu_hamming_distance (see failing unit test
  // TestHammingDistanceGPU in test_math_functions.cpp).
  NOT_IMPLEMENTED;
  thrust::device_vector<uint8_t> popcounts(n);
  // NOLINT_NEXT_LINE(whitespace/operators)
  popc_kernel<<<CAFFE_GET_BLOCKS(n), CAFFE_CUDA_NUM_THREADS>>>(
      n, x, y, thrust::raw_pointer_cast(popcounts.data()));
  return thrust::reduce(popcounts.begin(), popcounts.end(),
                        (uint32_t) 0, thrust::plus<uint32_t>());
}

template <>
uint32_t caffe_gpu_hamming_distance<double>(const int n, const double* x,
                                   const double* y) {
  // TODO: Fix caffe_gpu_hamming_distance (see failing unit test
  // TestHammingDistanceGPU in test_math_functions.cpp).
  NOT_IMPLEMENTED;
  thrust::device_vector<uint8_t> popcounts(n);
  // NOLINT_NEXT_LINE(whitespace/operators)
  popcll_kernel<<<CAFFE_GET_BLOCKS(n), CAFFE_CUDA_NUM_THREADS>>>(
      n, x, y, thrust::raw_pointer_cast(popcounts.data()));
  return thrust::reduce(popcounts.begin(), popcounts.end(),
                        /* NOLINT_NEXT_LINE(build/include_what_you_use) */
                        (uint32_t) 0, thrust::plus<uint32_t>());
}

void caffe_gpu_rng_uniform(const int n, unsigned int* r) {
  CURAND_CHECK(curandGenerate(Caffe::curand_generator(), r, n));
}

template <>
void caffe_gpu_rng_uniform<float>(const int n, const float a, const float b,
                                  float* r) {
  CURAND_CHECK(curandGenerateUniform(Caffe::curand_generator(), r, n));
  const float range = b - a;
  if (range != static_cast<float>(1)) {
    caffe_gpu_scal(n, range, r);
  }
  if (a != static_cast<float>(0)) {
    caffe_gpu_add_scalar(n, a, r);
  }
}

template <>
void caffe_gpu_rng_uniform<double>(const int n, const double a, const double b,
                                   double* r) {
  CURAND_CHECK(curandGenerateUniformDouble(Caffe::curand_generator(), r, n));
  const double range = b - a;
  if (range != static_cast<double>(1)) {
    caffe_gpu_scal(n, range, r);
  }
  if (a != static_cast<double>(0)) {
    caffe_gpu_add_scalar(n, a, r);
  }
}

template <>
void caffe_gpu_rng_gaussian(const int n, const float mu, const float sigma,
                            float* r) {
  CURAND_CHECK(
      curandGenerateNormal(Caffe::curand_generator(), r, n, mu, sigma));
}

template <>
void caffe_gpu_rng_gaussian(const int n, const double mu, const double sigma,
                            double* r) {
  CURAND_CHECK(
      curandGenerateNormalDouble(Caffe::curand_generator(), r, n, mu, sigma));
}

}  // namespace caffe
